<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tools</name>
    </assembly>
    <members>
        <member name="T:Vi.API.Wtsapi32">
            <summary>
            Provides access to the Windows Terminal Services API, specifically the WTSAPI32 functions.
            This class allows for the retrieval of session information from Remote Desktop Session Host servers.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_CURRENT_SERVER_HANDLE">
            <summary>
            WTS_CURRENT_SERVER_HANDLE: to indicate the RD Session Host server on which your application is running
            </summary>
        </member>
        <member name="M:Vi.API.Wtsapi32.WTSQuerySessionInformationW(System.IntPtr,System.Int32,Vi.API.Wtsapi32.WTS_INFO_CLASS,System.IntPtr@,System.IntPtr@)">
            <summary>
            Retrieves session information for the specified session on the specified Remote Desktop Session Host (RD Session Host) server. 
            It can be used to query session information on local and remote RD Session Host servers.
            </summary>
            <param name="hServer">A handle to an RD (Remote Desktop) Session Host server. Specify a handle opened by the WTSOpenServer function, 
            or specify WTS_CURRENT_SERVER_HANDLE to indicate the RD Session Host server on which your application is running.</param>
            <param name="SessionId">A Remote Desktop Services session identifier. To indicate the session in which the calling application is 
            running (or the current session) specify WTS_CURRENT_SESSION. Only specify WTS_CURRENT_SESSION when obtaining session information on 
            the local server. If WTS_CURRENT_SESSION is specified when querying session information on a remote server, the returned session 
            information will be inconsistent. Do not use the returned data.</param>
            <param name="WTSInfoClass">A value of the WTS_INFO_CLASS enumeration that indicates the type of session information to retrieve in 
            a call to the WTSQuerySessionInformation function.</param>
            <param name="ppBuffer">A pointer to a variable that receives a pointer to the requested information. The format and contents of the 
            data depend on the information class specified in the WTSInfoClass parameter. To free the returned buffer, call the WTSFreeMemory 
            function.</param>
            <param name="pBytesReturned">A pointer to a variable that receives the size, in bytes, of the data returned in ppBuffer.</param>
            <returns>If the function succeeds, the return value is a nonzero value. If the function fails, the return value is zero.
            To get extended error information, call GetLastError.</returns>
        </member>
        <member name="T:Vi.API.Wtsapi32.WTS_INFO_CLASS">
            <summary>
            Contains values that indicate the type of session information to retrieve in a call to the WTSQuerySessionInformation function.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSInitialProgram">
            <summary>
            A null-terminated string that contains the name of the initial program that Remote Desktop Services runs when the user logs on.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSApplicationName">
            <summary>
            A null-terminated string that contains the published name of the application that the session is running. 
            Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  This value is not supported
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSWorkingDirectory">
            <summary>
            A null-terminated string that contains the default directory used when launching the initial program.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSOEMId">
            <summary>
            This value is not used.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSSessionId">
            <summary>
            A ULONG value that contains the session identifier.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSUserName">
            <summary>
            A null-terminated string that contains the name of the user associated with the session.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSWinStationName">
            <summary>
            A null-terminated string that contains the name of the Remote Desktop Services session.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSDomainName">
            <summary>
            A null-terminated string that contains the name of the domain to which the logged-on user belongs.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSConnectState">
            <summary>
            The session's current connection state. For more information, see
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSClientBuildNumber">
            <summary>
            A ULONG value that contains the build number of the client.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSClientName">
            <summary>
            A null-terminated string that contains the name of the client.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSClientDirectory">
            <summary>
            A null-terminated string that contains the directory in which the client is installed.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSClientProductId">
            <summary>
            A USHORT client-specific product identifier.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSClientHardwareId">
            <summary>
            A ULONG value that contains a client-specific hardware identifier. This option is reserved for future use.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSClientAddress">
            <summary>
            The network type and network address of the client. For more information, see WTS_CLIENT_ADDRESS.
            The IP address is offset by two bytes from the start of the Address member of the WTS_CLIENT_ADDRESS structure.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSClientDisplay">
            <summary>
            Information about the display resolution of the client. For more information, see
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSClientProtocolType">
            <summary>
            A USHORT value that specifies information about the protocol type for the session. This is one of the following values.
            can be: {0: The console session, 1: This value is retained for legacy purposes, 2: The RDP protocol.}
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSIdleTime">
            <summary>
            This value returns FALSE. If you call GetLastError to get extended error information, GetLastError returns ERROR_NOT_SUPPORTED.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSLogonTime">
            <summary>
            This value returns FALSE. If you call GetLastError to get extended error information, GetLastError returns ERROR_NOT_SUPPORTED.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSIncomingBytes">
            <summary>
            This value returns FALSE. If you call GetLastError to get extended error information, GetLastError returns ERROR_NOT_SUPPORTED.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSOutgoingBytes">
            <summary>
            This value returns FALSE. If you call GetLastError to get extended error information, GetLastError returns ERROR_NOT_SUPPORTED.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSIncomingFrames">
            <summary>
            This value returns FALSE. If you call GetLastError to get extended error information, GetLastError returns ERROR_NOT_SUPPORTED.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSOutgoingFrames">
            <summary>
            This value returns FALSE. If you call GetLastError to get extended error information, GetLastError returns ERROR_NOT_SUPPORTED.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSClientInfo">
            <summary>
            Information about a Remote Desktop Connection (RDC) client. For more information, see WTSCLIENT.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSSessionInfo">
            <summary>
            Information about a client session on a RD Session Host server. For more information, see WTSINFO.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSSessionInfoEx">
            <summary>
            Extended information about a session on a RD Session Host server. For more information, see WTSINFOEX.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSConfigInfo">
            <summary>
            A WTSCONFIGINFO structure that contains information about the configuration of a RD Session Host server.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSValidationInfo">
            <summary>
            This value is not supported.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSSessionAddressV4">
            <summary>
            A WTS_SESSION_ADDRESS structure that contains the IPv4 address assigned to the session.
            If the session does not have a virtual IP address, the WTSQuerySessionInformation function returns ERROR_NOT_SUPPORTED.
            </summary>
        </member>
        <member name="F:Vi.API.Wtsapi32.WTS_INFO_CLASS.WTSIsRemoteSession">
            <summary>
            Determines whether the current session is a remote session. The WTSQuerySessionInformation function 
            returns a value of TRUE to indicate that the current session is a remote session, and FALSE to indicate 
            that the current session is a local session. This value can only be used for the local machine, so 
            the hServer parameter of the WTSQuerySessionInformation function must contain WTS_CURRENT_SERVER_HANDLE.
            </summary>
        </member>
        <member name="T:Vi.API.Kernel32">
            <summary>
            Translates the mothods of the API 'Kernel32' to make them usable like mormal c# methods. 
            </summary>
        </member>
        <member name="M:Vi.API.Kernel32.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Copies a string into the specified section of an initialization file. Using the native unmanaged kernel's function.
            </summary>
            <param name="section">The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters.</param>
            <param name="key">The name of the key to be associated with a string. If the key does not exist in the specified section, it is created. If this parameter is NULL, the entire section, including all entries within the section, is deleted.</param>
            <param name="lpString">A string to be written to the file. If this parameter is NULL, the key pointed to by the 'key' parameter is deleted.</param>
            <param name="fileName">The name of the initialization file. (If the file was created using Unicode characters, the function writes Unicode characters to the file. Otherwise, the function writes ANSI characters.)</param>
            <returns>If the function successfully copies the string to the initialization file, the return value is nonzero. If the function fails, or if it flushes the cached version of the most recently accessed initialization file, the return value is zero.To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Vi.API.Kernel32.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Retrieves a string from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters.</param>
            <param name="key">The name of the key to be associated with a string. If the key does not exist in the specified section, it is created. If this parameter is NULL, the entire section, including all entries within the section, is deleted.</param>
            <param name="default">The returnig value if enything goes wrong.</param>
            <param name="sb">The string.Builder used to compose the resulting string.</param>
            <param name="size">The dimension of the buffer.</param>
            <param name="fileName">The name of the INI file.</param>
            <returns>A number segnalating if the function succeded.</returns>
        </member>
        <member name="M:Vi.API.Kernel32.GetPrivateProfileString(System.String,System.String,System.String,System.Char[],System.Int32,System.String)">
            <summary>
            Retrieves an array of characters from the specified section in an initialization file.
            </summary>
            <param name="section">The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters.</param>
            <param name="key">The name of the key to be associated with a string. If the key does not exist in the specified section, it is created. If this parameter is NULL, the entire section, including all entries within the section, is deleted.</param>
            <param name="default">The returnig value if enything goes wrong.</param>
            <param name="characters">The container used to keep the result.</param>
            <param name="size">The dimension of the buffer.</param>
            <param name="fileName">The name of the INI file.</param>
            <returns>A number segnalating if the function succeded.</returns>
        </member>
        <member name="M:Vi.API.Kernel32.GetPrivateProfileString(System.String,System.String,System.String,System.Byte[],System.Int32,System.String)">
            <summary>
            Retrieves an array of bytes from the specified section in an initialization file
            </summary>
            <param name="section">The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters.</param>
            <param name="key">The name of the key to be associated with a string. If the key does not exist in the specified section, it is created. If this parameter is NULL, the entire section, including all entries within the section, is deleted.</param>
            <param name="default">The returnig value if enything goes wrong.</param>
            <param name="bytes">The container used to keep the result.</param>
            <param name="size">The dimension of the buffer.</param>
            <param name="fileName">The name of the INI file.</param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.Kernel32.GetPrivateProfileSectionNames(System.Char[],System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="characters"></param>
            <param name="size"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.Kernel32.GetPrivateProfileSectionNames(System.Byte[],System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="size"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.Kernel32.GetPrivateProfileSectionNames(System.IntPtr,System.UInt32,System.String)">
            <summary>
            
            </summary>
            <param name="lpszReturnBuffer"></param>
            <param name="size"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.Kernel32.GetPrivateProfileSection(System.String,System.Byte[],System.Int32,System.String)">
            <summary>
            Retrieves all the keys and values for the specified section of an initialization file.
            </summary>
            <param name="section">The name of the section in the initialization file.</param>
            <param name="bytes">A buffer that receives the key name and value pairs associated with the named section. The buffer is filled with one or more null-terminated strings; the last string is followed by a second null character.</param>
            <param name="size">The size of the buffer pointed to by the lpReturnedString parameter, in characters. The maximum profile section size is 32,767 characters.</param>
            <param name="fileName">The name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
            <returns>The return value specifies the number of characters copied to the buffer, not including the terminating null character. If the buffer is not large enough to contain all the key name and value pairs associated with the named section, the return value is equal to nSize minus two.</returns>
        </member>
        <member name="M:Vi.API.Kernel32.GetLastError">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vi.API.User32">
            <summary>
            
            </summary>
        </member>
        <member name="M:Vi.API.User32.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="nCmdShow"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.User32.GetConsoleWindow">
            <summary>
            Retrieves the window handle used by the console associated with the calling process.
            </summary>
            <returns>The handle to the console window, or <see cref="F:System.IntPtr.Zero"/> if there is no console.</returns>
        </member>
        <member name="M:Vi.API.User32.AllocConsole">
            <summary>
            Allocates a new console for the calling process.
            </summary>
            <returns>True if the console was successfully allocated; otherwise, false.</returns>
        </member>
        <member name="M:Vi.API.User32.IsWindowVisible(System.IntPtr)">
            <summary>
            Determines whether the specified window is visible.
            </summary>
            <param name="hWnd">A handle to the window to be checked.</param>
            <returns><c>true</c> if the window is visible; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Vi.API.User32.IsConsoleVisible">
            <summary>
            Returns true if the 'Console is visible
            </summary>
        </member>
        <member name="M:Vi.API.User32.ToggleConsoleVisibility">
            <summary>
            Switches the 'Console' (window) visibility 
            </summary>
        </member>
        <member name="M:Vi.API.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.User32.SwitchToThisWindow(System.IntPtr,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="fAltTab"></param>
        </member>
        <member name="M:Vi.API.User32.FindWindowW(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.User32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.User32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="Msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.User32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.String)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="Msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.User32.SendMessage(System.IntPtr,System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="Msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.User32.SendMessage(System.IntPtr,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="Msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.API.User32.SendMessage(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="Msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="T:Vi.API.CS.Wtsapi32">
            <summary>
            La versione 'C#' delle rispettive funzione API.
            </summary>
        </member>
        <member name="M:Vi.API.CS.Wtsapi32.WTSQuerySessionInformationW(System.IntPtr,System.Int32,Vi.API.Wtsapi32.WTS_INFO_CLASS)">
            <summary>
            Retrieves session information for the specified session on the specified Remote Desktop Session Host (RD Session Host) server. It can be used to query session information on local and remote RD Session Host servers.
            </summary>
            <param name="hServer">A handle to an RD Session Host server. Specify a handle opened by the WTSOpenServer function, or specify WTS_CURRENT_SERVER_HANDLE to indicate the RD Session Host server on which your application is running.</param>
            <param name="sessionId">A Remote Desktop Services session identifier. To indicate the session in which the calling application is running (or the current session) specify WTS_CURRENT_SESSION. Only specify WTS_CURRENT_SESSION when obtaining session information on the local server. If WTS_CURRENT_SESSION is specified when querying session information on a remote server, the returned session information will be inconsistent. Do not use the returned data.</param>
            <param name="WTSInfoClass">A value of the WTS_INFO_CLASS enumeration that indicates the type of session information to retrieve in a call to the WTSQuerySessionInformation function.</param>
            <returns></returns>
        </member>
        <member name="T:Vi.Extensions.Double.Methods">
            <summary>
            Collection of 'extension methods' for decimal
            </summary>
        </member>
        <member name="M:Vi.Extensions.Double.Methods.ToText(System.Double)">
            <summary>
            Converts a decimal in a string with a fixed number of decimals.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>text representation of a decimal with fixed number of decimal figures.</returns>
        </member>
        <member name="T:Vi.Extensions.Array.Methods">
            <summary>
            Collection of Utility Extention methods
            </summary>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.Join``1(``0[],System.String)">
            <summary>
            implements "string.Join(separator, value);"
            </summary>
            <param name="value">The array to join</param>
            <param name="separator">the string used to keep separated the element from the original array in the resulting string.</param>
            <returns>a string of all the element in 'value' separated by the 'separator'.</returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.MaxIndex(System.Array)">
            <summary>
            Provides the max index for the array. Max index is (Length - 1) for zero based array.
            </summary>
            <param name="value">The array object.</param>
            <returns>value.Length - 1.</returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.Last``1(``0[])">
            <summary>
            Return the last item of the array
            </summary>
            <typeparam name="T">The generic type of the array.</typeparam>
            <param name="value">The array object.</param>
            <returns>value[value.Length - 1];.</returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.First``1(``0[])">
            <summary>
            Returns the first item of the array.
            </summary>
            <typeparam name="T">The generic type of the array.</typeparam>
            <param name="value">The array object.</param>
            <returns>value[0].</returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.First(System.Int32[])">
            <summary>
            Returns the first item of the array (Overload for 'int').
            </summary>
            <param name="value">The array object.</param>
            <returns>value[0].</returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.Append``1(``0[],``0)">
            <summary>
            Appends an item at the end of the array.
            </summary>
            <typeparam name="T">The generic type of the array.</typeparam>
            <param name="value">The array object.</param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets the array slice.
            </summary>
            <typeparam name="T">The generic type</typeparam>
            <param name="source">The source array (the array from which 'cut the slice'.</param>
            <param name="start">The stating index (inclusive).</param>
            <param name="length">The number of item in the new array (the slice).</param>
            <returns>A new array made of 'length' elements extracted from 'value' starting at 'start' (included).</returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.Slice``1(``0[],System.Int32)">
            <summary>
            Gets the array starting from the position 'Start' (included), till the end.
            </summary>
            <typeparam name="T">The generic type</typeparam>
            <param name="source">The source array (the array from which 'cut the slice'.</param>
            <param name="start">The stating index (inclusive).</param>
            <returns>A new array made of the remaining elements extracted from 'value' starting at 'start' (included).</returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.Sort(System.Int32[])">
            <summary>
            Sorts an array of integers.
            </summary>
            <param name="source"></param>
            <returns>'source' after apply "System.Array.Sort(source)"</returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.Sort(System.String[])">
            <summary>
            Sorts an array of strings.
            </summary>
            <param name="source">The array of strings to sort.</param>
            <returns>The sorted array of strings.</returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.ToMessage(System.Array,System.String)">
            <summary>
            Defined for debug/Log pourposes. Joins the array using the provided separator
            </summary>
            <param name="value">The array to convert to string.</param>
            <param name="separator">The separator used to join the array.</param>
            <returns>Null if null; empty if length = 0. Otherwise the array {1, 2, 3 4} become the string "1; 2; 3, 4".</returns>
        </member>
        <member name="M:Vi.Extensions.Array.Methods.Remove(System.String[],System.String)">
            <summary>
            Removes an item from a list
            </summary>
            <param name="values">The original list</param>
            <param name="value">the item to remove</param>
        </member>
        <member name="T:Vi.Extensions.Bool.Methods">
            <summary>
            Collection of 'extension methods' for boolean
            </summary>
        </member>
        <member name="M:Vi.Extensions.Bool.Methods.ToConditional(System.Boolean,System.String,System.String)">
            <summary>
            checks the variable and returns one of the two provided parameters.
            </summary>
            <param name="value">The value to check.</param>
            <param name="onTrue">The parameter to return if value is true.</param>
            <param name="onFalse">The parameter to return if value is false.</param>
            <returns>The parameter 'onTrue' if value is true.  'onFalse' otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.Bool.Methods.ToYN(System.Boolean)">
            <summary>
            Return "Y" or "N";
            </summary>
            <param name="value">The value to check.</param>
            <returns>'Y' on true. 'N' otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.Bool.Methods.ToYesNo(System.Boolean)">
            <summary>
            Return "Yes" or "No";
            </summary>
            <param name="value">The value to check.</param>
            <returns>'Yes' on true. 'No' otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.Bool.Methods.ToTF(System.Boolean)">
            <summary>
            Return "T" or "F";
            </summary>
            <param name="value">The value to check.</param>
            <returns>'T' on true. 'F' otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.Bool.Methods.ToTrueFalse(System.Boolean)">
            <summary>
            Return the string: "True" or "False";
            </summary>
            <param name="value">The value to check.</param>
            <returns>'True' on true. 'False' otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.Bool.Methods.ToConditional(System.Boolean,System.Action,System.Action)">
            <summary>
            checks the variable and executes one of the two provided callback ('Action')
            </summary>
            <param name="value">The value to check.</param>
            <param name="onTrue">The action to be executed if value is true.</param>
            <param name="onFalse">The action to be executed if value is false.</param>
            <returns></returns>
        </member>
        <member name="T:Vi.Extensions.DateTime.Methods">
            <summary>
            Collection of 'extension methods' for DateTime
            </summary>
        </member>
        <member name="M:Vi.Extensions.DateTime.Methods.ToYyyyMMddhhmmssfff(System.DateTime)">
            <summary>
            Converts a DateTime in the format 'yyyy-MM-dd hh:mm:ss fff'
            </summary>
            <param name="value">The datetime to convert.</param>
            <returns>the datetime in the format 'yyyy-MM-dd hh:mm:ss fff'</returns>
        </member>
        <member name="M:Vi.Extensions.DateTime.Methods.ToHhmmssfff(System.DateTime)">
            <summary>
            Converts a DateTime in the format 'hh:mm:ss fff'
            </summary>
            <param name="value">The datetime to convert.</param>
            <returns>the datetime in the format 'hh:mm:ss fff'</returns>
        </member>
        <member name="T:Vi.Extensions.Enums.Methods">
            <summary>
            Collection of 'extension methods' for Enums
            </summary>
        </member>
        <member name="M:Vi.Extensions.Enums.Methods.ToInt``1(``0,System.Int32)">
            <summary>
            Casts the value 'source' into an integer.
            </summary>
            <typeparam name="T">Any type derived from 'IConvertible'.</typeparam>
            <param name="source">The type we want to convert into aint value..</param>
            <param name="default">The int obtained casting value. @default otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:Vi.Extensions.Enums.Methods.Count``1(``0)">
            <summary>
            Counts the number of element contained in any type derived from 'IConvertible'.
            </summary>
            <typeparam name="T">Any type derived from 'IConvertible'.</typeparam>
            <param name="source">The type we want count how many elements it has.</param>
            <returns>The number of elements the type has.</returns>
        </member>
        <member name="M:Vi.Extensions.Enums.Methods.Description``1(``0)">
            <summary>
            Gets the description (from the decorator) of the value.
            </summary>
            <typeparam name="T">Any type derived from 'IConvertible'.</typeparam>
            <param name="value">The value from which we want to get its description (if any).</param>
            <returns></returns>
        </member>
        <member name="T:Vi.Extensions.Exception.Methods">
            <summary>
            Collection of 'extension methods' for Exception
            </summary>
        </member>
        <member name="M:Vi.Extensions.Exception.Methods.ToError(System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of 'Vi.Types.Error' having the original 'Syste.Exception' assigned to the 'InnerException' property.
            </summary>
            <param name="se">The original Exception</param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <returns></returns>
        </member>
        <member name="M:Vi.Extensions.Exception.Methods.ToError(System.Exception,System.String,System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of 'Vi.Types.Error' having the original 'Syste.Exception' assigned to the 'InnerException' property.
            </summary>
            <param name="se">The original Exception</param>
            <param name="message">A message to show in the field 'Message'</param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
        </member>
        <member name="M:Vi.Extensions.Exception.Methods.Trace(System.Exception)">
            <summary>
            Calls 'System.Diagnostics.Trace.TraceError': Writes an error message to the trace listeners in the System.Diagnostics.Trace.Listeners collection using the specified message.
            </summary>
            <param name="se">The instance of the exception.</param>
        </member>
        <member name="M:Vi.Extensions.Exception.Methods.Log(System.Exception)">
            <summary>
            Logs the error calling 'Vi.Log.Exception(se);'
            There will be two different logs on two different files 
            A 'N' (normal) log and an 'E' (Exception) log.
            The 'N' log will contain only the message of the exception, 
            while the 'E' log will contain a full set of info about the exception.
            </summary>
            <param name="se">The system.Exception to log.</param>
        </member>
        <member name="M:Vi.Extensions.Exception.Methods.Log(System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Logs the error calling 'Vi.Logger.Write(se);'
            </summary>
            <param name="se">The instance of the exception.</param>
            <param name="line">The line number in the source file where the exception occurred. Default is 0.</param>
            <param name="member">The name of the member where the exception occurred. Default is "?"</param>
            <param name="file">The full path of the source file where the exception occurred. Default is "?"</param>
        </member>
        <member name="T:Vi.Extensions.Byte.Methods">
            <summary>
            Collection of 'extension methods' for byte
            </summary>
        </member>
        <member name="M:Vi.Extensions.Byte.Methods.IsEven(System.Byte)">
            <summary>
            Check if the number is even (divisible by 2).
            </summary>
            <param name="value">The value to check.</param>
            <returns>Returns '(value AND 1) == 0'.</returns>
        </member>
        <member name="M:Vi.Extensions.Byte.Methods.IsOdd(System.Byte)">
            <summary>
            Check if the number is Odd (NOT divisible by 2).
            </summary>
            <param name="value">The value to check.</param>
            <returns>Returns '(value AND 1) == 1'.</returns>
        </member>
        <member name="M:Vi.Extensions.Byte.Methods.IsBetween(System.Byte,System.Byte,System.Byte)">
            <summary>
            Checks if a number is between min and max (included)
            </summary>
            <param name="value">The number to check.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximun value allowed.</param>
            <returns>((value &gt;= min) AND (value &lt;= max)</returns>
        </member>
        <member name="M:Vi.Extensions.Byte.Methods.Between(System.Byte,System.Byte,System.Byte)">
            <summary>
            Forces the value between 'min and 'max' (included)
            </summary>
            <param name="value">The number to limit.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximun value allowed.</param>
            <returns>Math.Min(Math.Max(value, min), max);</returns>
        </member>
        <member name="T:Vi.Extensions.Decimal.Methods">
            <summary>
            Collection of 'extension methods' for decimal
            </summary>
        </member>
        <member name="M:Vi.Extensions.Decimal.Methods.IsBetween(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Checks if a number is between min and max (included)
            </summary>
            <param name="value">The number to check.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximun value allowed.</param>
            <returns>((value &gt;= min) AND (value &lt;= max)</returns>
        </member>
        <member name="M:Vi.Extensions.Decimal.Methods.Between(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Forces the value between 'min and 'max' (included
            </summary>
            <param name="value">The number to limit.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximun value allowed.</param>
            <returns>Math.Min(Math.Max(value, min), max);</returns>
        </member>
        <member name="M:Vi.Extensions.Decimal.Methods.ToPercent(System.Decimal,System.SByte)">
            <summary>
            Converts a decimal (Percentage) in a string with a fixed number of decimals.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="decimals">The number of decimals.</param>
            <returns>Text representation of a Percentage with fixed number of decimal figures.</returns>
        </member>
        <member name="M:Vi.Extensions.Decimal.Methods.ToText(System.Decimal,System.Byte)">
            <summary>
            Converts a decimal in a string with a fixed number of decimals.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="decimals">The number of decimals.</param>
            <returns>text representation of a decimal with fixed number of decimal figures.</returns>
        </member>
        <member name="T:Vi.Extensions.Float.Methods">
            <summary>
            Collection of 'extension methods' for float
            </summary>
        </member>
        <member name="M:Vi.Extensions.Float.Methods.IsBetween(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a number is between min and max (included)
            </summary>
            <param name="value">The number to check.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximun value allowed.</param>
            <returns>((value &gt;= min) AND (value &lt;= max)</returns>
        </member>
        <member name="M:Vi.Extensions.Float.Methods.Between(System.Single,System.Single,System.Single)">
            <summary>
            Forces the value between 'min and 'max' (included
            </summary>
            <param name="value">The number to limit.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximun value allowed.</param>
            <returns>Math.Min(Math.Max(value, min), max);</returns>
        </member>
        <member name="M:Vi.Extensions.Float.Methods.ToPercent(System.Single,System.SByte)">
            <summary>
            Converts a float in a string with a fixed number of decimals in the format used for percentages.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="decimals">The number of decimals.</param>
            <returns>Text representation of a Percentage with fixed number of decimal figures.</returns>
        </member>
        <member name="M:Vi.Extensions.Float.Methods.ToText(System.Single,System.Byte)">
            <summary>
            Converts a float in a string with a fixed number of decimals.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="decimals">The number of decimals.</param>
            <returns>text representation of a decimal with fixed number of decimal figures.</returns>
        </member>
        <member name="T:Vi.Extensions.NameValueCollection.Methods">
            <summary>
            Collection of 'extension methods' for NameValueCollection
            </summary>
        </member>
        <member name="M:Vi.Extensions.NameValueCollection.Methods.ToInt(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            Reads the value of the itmem with the provided 'name' in the 'NameValueCollection'.
            </summary>
            <param name="nvc">The 'NameValueCollection'.</param>
            <param name="name">The name of the item in the collection.</param>
            <param name="default">The value to return if the reading fails.</param>
            <returns>The value casted as 'int', of the item with the provided 'name' (nvc[name]). @default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.NameValueCollection.Methods.GetString(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Reads the value of the itmem with the provided 'name' in the 'NameValueCollection'.
            </summary>
            <param name="nvc">The 'NameValueCollection'.</param>
            <param name="name">The name of the item in the collection.</param>
            <param name="default">The value to return if the reading fails.</param>
            <returns>The value of the item with the provided 'name' (nvc[name]). @default otherwise.</returns>
        </member>
        <member name="T:Vi.Extensions.Object.Methods">
            <summary>
            Collection of 'extension methods' for Int
            </summary>
        </member>
        <member name="M:Vi.Extensions.Object.Methods.IsNull(System.Object)">
            <summary>
            Checks if an instance of an object is null.
            </summary>
            <param name="value">The to check.</param>
            <returns>Returns value == null;.</returns>
        </member>
        <member name="M:Vi.Extensions.Object.Methods.IsNotNull(System.Object)">
            <summary>
            Checks if an instance of an object is NOT null.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Returns value != null;.</returns>
        </member>
        <member name="M:Vi.Extensions.Object.Methods.ToBytes(System.Object)">
            <summary>
            Converts an object to a byte array using binary serialization.
            </summary>
            <param name="value">The object to convert to a byte array.</param>
            <returns>A byte array representation of the object, or null if the object is null.</returns>
        </member>
        <member name="M:Vi.Extensions.Object.Methods.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes a byte array into an object of type T.
            </summary>
            <typeparam name="T">The type of the object to deserialize to. Must be a reference type.</typeparam>
            <param name="bytes">The byte array to deserialize.</param>
            <returns>The deserialized object of type T, or null if the byte array is null.</returns>
        </member>
        <member name="T:Vi.Extensions.Int.Methods">
            <summary>
            Collection of 'extension methods' for Int
            </summary>
        </member>
        <member name="M:Vi.Extensions.Int.Methods.IsEven(System.Int32)">
            <summary>
            Check if the number is even (divisible by 2).
            </summary>
            <param name="value"></param>
            <returns>Returns '(value AND 1) == 0'.</returns>
        </member>
        <member name="M:Vi.Extensions.Int.Methods.IsOdd(System.Int32)">
            <summary>
            Check if the number is Odd (NOT divisible by 2).
            </summary>
            <param name="value"></param>
            <returns>Returns '(value AND 1) == 1'.</returns>
        </member>
        <member name="M:Vi.Extensions.Int.Methods.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if a number is between min and max (included)
            </summary>
            <param name="value">The number to check.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximun value allowed.</param>
            <returns>((value &gt;= min) AND (value &lt;= max)</returns>
        </member>
        <member name="M:Vi.Extensions.Int.Methods.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
            Forces the value between 'min and 'max' (included
            </summary>
            <param name="value">The number to limit.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximun value allowed.</param>
            <returns>Math.Min(Math.Max(value, min), max);</returns>
        </member>
        <member name="M:Vi.Extensions.Int.Methods.ToText(System.Int32)">
            <summary>
            Formats a number  following this pattern: '#,##0'
            </summary>
            <param name="value">The number to format.</param>
            <returns>The number formatted.</returns>
        </member>
        <member name="T:Vi.Extensions.Long.Methods">
            <summary>
            Collection of 'extension methods' for Long
            </summary>
        </member>
        <member name="M:Vi.Extensions.Long.Methods.IsEven(System.Byte)">
            <summary>
            Check if the number is even (divisible by 2).
            </summary>
            <param name="value">The value to check.</param>
            <returns>Returns '(value AND 1) == 0'.</returns>
        </member>
        <member name="M:Vi.Extensions.Long.Methods.IsOdd(System.Byte)">
            <summary>
            Check if the number is Odd (NOT divisible by 2).
            </summary>
            <param name="value">The value to check.</param>
            <returns>Returns '(value AND 1) == 1'.</returns>
        </member>
        <member name="M:Vi.Extensions.Long.Methods.IsBetween(System.Int64,System.Int64,System.Int64)">
            <summary>
            Checks if a number is between min and max (included)
            </summary>
            <param name="value">The number to check.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximun value allowed.</param>
            <returns>((value &gt;= min) AND (value &lt;= max)</returns>
        </member>
        <member name="M:Vi.Extensions.Long.Methods.Between(System.Int64,System.Int64,System.Int64)">
            <summary>
            Forces the value between 'min and 'max' (included
            </summary>
            <param name="value">The number to limit.</param>
            <param name="min">Minimum value allowed.</param>
            <param name="max">Maximun value allowed.</param>
            <returns>Math.Min(Math.Max(value, min), max);</returns>
        </member>
        <member name="M:Vi.Extensions.Long.Methods.ToDateTime(System.Int64,System.DateTime)">
            <summary>
            Converts 'DateTime.Ticks' to 'DateTime'.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="default">Makes this method exception resislient.</param>
            <returns>The DateTime associated to the value, @default otherwise.</returns>
        </member>
        <member name="T:Vi.Extensions.String.Methods">
            <summary>
            Collection of extention methods for 'string'
            </summary>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ForEach(System.String[],System.Action{System.String})">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="each"></param>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToItems(System.String,System.String[],System.Char)">
            <summary>
            Like 'Split' this Extension Method splits a string. 
            The difference are first applies trim to the parameter value and second 
            returns '@default' if the string to split is null
            </summary>
            <param name="value">The string to split</param>
            <param name="default">The returning value in case the splitting string is null.</param>
            <param name="separator">The separator. The default is ';'</param>
            <returns>value?.Trim(charArray)?.Split(charArray) ?? @default;</returns>//
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToItems(System.String,System.Char)">
            <summary>
            Splits a string into an array of strings using the specified separator.
            </summary>
            <param name="value">The string to split</param>
            <param name="separator">The string used to split the main string</param>
            <returns>an array made of the parts of the string once removed the separator</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToItems(System.String,System.String)">
            <summary>
            Splits a string into an array of strings using the specified separator.
            (the built-in method 'Split' splits the string using separator one character at the time)
            </summary>
            <param name="value">The string to split</param>
            <param name="separator">The string used to split the main string</param>
            <returns>an array made of the parts of the string once removed the separator</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToItems(System.String)">
            <summary>
            Like 'Split' this Extension Method splits a string. 
            The difference are first applies trim to the parameter value and second 
            returns '@default' if the string to split is null
            The default value is the empty array (a dimension 0 array, not null)
            the Separator is ';'
            </summary>
            <param name="value">The string to split</param>
            <returns>value?.Trim(charArray)?.Split(charArray) ?? @default;</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.Trim(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="subString"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToInt(System.String,System.Nullable{System.Int32})">
            <summary>
            Applies 'int.TryParse'
            </summary>
            <param name="value">The value to convert.</param>
            <param name="default">The result if 'tryParse' fails.</param>
            <returns>The integer associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToFloat(System.String,System.Single)">
            <summary>
            Converts a string to 'float'
            </summary>
            <param name="value">the value to convert.</param>
            <param name="default">The default value in case conversion fails.</param>
            <returns>The float representation of the 'value' (if any). default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToDecimal(System.String,System.Decimal)">
            <summary>
            Converts a string to 'decimal'
            </summary>
            <param name="value">the value to convert.</param>
            <param name="default">The default value in case conversion fails.</param>
            <returns>The float representation of the 'value' (if any). default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToInt(System.String,System.Int32)">
            <summary>
            Applies 'int.TryParse'
            </summary>
            <param name="value">The value to convert.</param>
            <param name="default">The result if 'tryParse' fails.</param>
            <returns>The int associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToByte(System.String,System.Byte)">
            <summary>
            Applies 'byte.TryParse'
            </summary>
            <param name="value">The value to convert.</param>
            <param name="default">The result if 'tryParse' fails.</param>
            <returns>The int associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToLong(System.String,System.Int64)">
            <summary>
            Applies 'long.TryParse'
            </summary>
            <param name="value">The value to convert.</param>
            <param name="default">The result if 'tryParse' fails.</param>
            <returns>The long associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToBool(System.String,System.Boolean)">
            <summary>
            Applies 'bool.TryParse'
            </summary>
            <param name="value">The value to convert.</param>
            <param name="default">The result if 'tryParse' fails.</param>
            <returns>The boolean associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToPercentage(System.String,Vi.Types.Percentage)">
            <summary>
            Applies 'Vi.Types.Percentage.TryParse'
            </summary>
            <param name="value">The value to convert.</param>
            <param name="default">The result if 'tryParse' fails.</param>
            <returns>The percentage associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToInt(System.String,System.Char,System.Int32[])">
            <summary>
            Applies 'int.TryParse to a 'separator' separated values'.
            </summary>
            <param name="value">The list of values to convert. Values are separated by the caracter in the parameter 'separator'.</param>
            <param name="separator">The characters used as separator.</param>
            <param name="default">The result if the parse fails.</param>
            <returns>An array of integer associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToInt(System.String,System.Int32[])">
            <summary>
            Applies 'int.TryParse to a ';' separated values'.
            </summary>
            <param name="value">The list of values to convert. Values are separated by the caracter in the parameter 'separator'.</param>
            <param name="default">The result if the parse fails.</param>
            <returns>An array of integer associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToLong(System.String,System.Char,System.Int64[])">
            <summary>
            Applies 'long.TryParse to a 'separator' separated values'.
            </summary>
            <param name="value">The list of values to convert. Values are separated by the caracter in the parameter 'separator'.</param>
            <param name="separator">The characters used as separator.</param>
            <param name="default">The result if the parse fails.</param>
            <returns>An array of long associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToLong(System.String,System.Int64[])">
            <summary>
            Applies 'long.TryParse to a ';' separated values'.
            </summary>
            <param name="value">The list of values to convert. Values are separated by the caracter in the parameter 'separator'.</param>
            <param name="default">The result if the parse fails.</param>
            <returns>An array of long associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToBool(System.String,System.Char,System.Boolean[])">
            <summary>
            Applies 'bool.TryParse to a 'separator' separated values'.
            </summary>
            <param name="value">The list of values to convert. Values are separated by the caracter in the parameter 'separator'.</param>
            <param name="separator">The characters used as separator.</param>
            <param name="default">The result if the parse fails.</param>
            <returns>An array of long associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToBool(System.String,System.Boolean[])">
            <summary>
            Applies 'bool.TryParse to a ';' separated values'.
            </summary>
            <param name="value">The list of values to convert. Values are separated by the caracter in the parameter 'separator'.</param>
            <param name="default">The result if the parse fails.</param>
            <returns>An array of long associated with the 'value', default otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToDirectory(System.String)">
            <summary>
            Converts a string to a Vi.Types.Directory object.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>A Directory object created from the string.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToFile(System.String)">
            <summary>
            Converts a string to a Vi.Types.File object.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>A File object created from the string.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToJSON(System.String)">
            <summary>
            Converts a string to a Vi.Types.JSON object.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>A JSON object created from the string.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.ToT``1(System.String,System.Char,``0[],System.Func{System.String,``0,``0})">
            <summary>
            Applies 'T.ToXyz' to a 'separator' separated values. E.g. if T is bool applies ToBool to each value in the list of values.
            ATTENTION: each 'ToXyz' shold never raise an exception. ToT&lt;T&gt; could.
            </summary>
            <typeparam name="T">The destination type for the parse.</typeparam>
            <param name="value">The list of values to convert. Values are separated by the caracter in the parameter 'separator'.</param>
            <param name="separator">The characters used as separator.</param>
            <param name="default">The result if the parse fails.</param>
            <param name="toT">The lambda expression to parse eachitem. E.g. if 'T' is 'bool' then 'toT = (v, @d) => v.ToBool(@d)'.</param>
            <returns>An array of 'T' associated with the 'value', default otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If default is 'null'.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If default is shorter than ''value.Split(separator).Length'.</exception>
        </member>
        <member name="M:Vi.Extensions.String.Methods.IsEmpty(System.String)">
            <summary>
            Checks if the string is Empty
            </summary>
            <param name="value">The string to check.</param>
            <returns>'value == String.Empty'</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.IsNull(System.String)">
            <summary>
            Checks if the string is null.
            </summary>
            <param name="value">The string to check.</param>
            <returns>The result of this check: (value == null).</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.IsNotNull(System.String)">
            <summary>
            Checks if the string is NOT null
            </summary>
            <param name="value">The string to check.</param>
            <returns>the return value is !value.isNull</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.IsSpaces(System.String)">
            <summary>
            Check if the string is made of zero or more spaces.
            (Usually an input is not valid if made of any number of spaces, included 
            the empty string. That's why this function is true also for the empty string.)
            </summary>
            <param name="value">The string to check.</param>
            <returns>value.Trim().IsEmpty() (When value is not null). False otherwise.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.IsNullOrSpaces(System.String)">
            <summary>
            Check if the string is 'null', 'empty' or made of spaces.
            </summary>
            <param name="value">The string to check.</param>
            <returns>value.IsNull() || value.IsSpaces()</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.IsNumber(System.String)">
            <summary>
            Checks if the string can be converted to double (the numeric type with the wider range).
            </summary>
            <param name="value">The string to check.</param>
            <returns>System.Double.TryParse(value, out _)</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.Remove(System.String,System.String[])">
            <summary>
            Removes from the string the occourrences of the items in 'oldValues'. Is the same of Replace(oldValues, String.Empty).
            </summary>
            <param name="value">The string with the substrings to remove. (Runs: Replace(oldValues, String.Empty);)</param>
            <param name="oldValues">The list of item to remove from the string.</param>
            <returns>The original string purged from the substring in 'oldValues'</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.Replace(System.String,System.String[],System.String)">
            <summary>
            Replaces each value in 'oldValues' with 'newValue'. (if newValue == String.Empty then use Replace(newValues);
            </summary>
            <param name="value">The string with the substrings to remove.</param>
            <param name="oldValues">The list of item to replace from the string.</param>
            <param name="newValue">The new value for all the items in 'oldValues'.</param>
            <returns></returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.Format(System.String,System.String[])">
            <summary>
            Formats a string using the specified format and values.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="values">An array of strings to format.</param>
            <returns>A formatted string.</returns>
        </member>
        <member name="M:Vi.Extensions.String.Methods.IsExcelCoordinates(System.String)">
            <summary>
            Checks if a string is in the format used by excel to denote a cell, with or without the '$' simbol (E.g.: A1, B2, C3, AA1, AB2, AZS342)
            (This is the regex's pattern: ^(\$?[A-Z]{1,3}\$?[0-9]{1,4})$
            </summary>
            <param name="text">The text to check</param>
            <returns>True if the text coul be a valid ecel coordinate. False otherwise.</returns>
        </member>
        <member name="T:Vi.Extensions.DialogResult.Methods">
            <summary>
            Collection of 'extension methods' for DialogResult
            </summary>
        </member>
        <member name="M:Vi.Extensions.DialogResult.Methods.IsOk(System.Windows.Forms.DialogResult)">
            <summary>
            Checks the value of 'DialogResult'
            </summary>
            <param name="dr">True s è uguale a 'DialogResult.OK'. False altrimenti.</param>
            <returns>True if dr == OK</returns>
        </member>
        <member name="M:Vi.Extensions.DialogResult.Methods.IsAbort(System.Windows.Forms.DialogResult)">
            <summary>
            Checks the value of 'DialogResult'
            </summary>
            <param name="dr">True s è uguale a 'DialogResult.Abort'. False altrimenti.</param>
            <returns>True if dr == Abort</returns>
        </member>
        <member name="M:Vi.Extensions.DialogResult.Methods.IsCancel(System.Windows.Forms.DialogResult)">
            <summary>
            Checks the value of 'DialogResult'
            </summary>
            <param name="dr">True s è uguale a 'DialogResult.Cancel'. False altrimenti.</param>
            <returns>True if dr == Cancel</returns>
        </member>
        <member name="M:Vi.Extensions.DialogResult.Methods.IsIgnore(System.Windows.Forms.DialogResult)">
            <summary>
            Checks the value of 'DialogResult'
            </summary>
            <param name="dr">True s è uguale a 'DialogResult.Ignore'. False altrimenti.</param>
            <returns>True if dr == Ignore</returns>
        </member>
        <member name="M:Vi.Extensions.DialogResult.Methods.IsNo(System.Windows.Forms.DialogResult)">
            <summary>
            Checks the value of 'DialogResult'
            </summary>
            <param name="dr">True s è uguale a 'DialogResult.No'. False altrimenti.</param>
            <returns>True if dr == No</returns>
        </member>
        <member name="M:Vi.Extensions.DialogResult.Methods.IsNone(System.Windows.Forms.DialogResult)">
            <summary>
            Checks the value of 'DialogResult'
            </summary>
            <param name="dr">True s è uguale a 'DialogResult.None'. False altrimenti.</param>
            <returns>True if dr == None</returns>
        </member>
        <member name="M:Vi.Extensions.DialogResult.Methods.IsRetry(System.Windows.Forms.DialogResult)">
            <summary>
            Checks the value of 'DialogResult'
            </summary>
            <param name="dr">True s è uguale a 'DialogResult.Retry'. False altrimenti.</param>
            <returns>True if dr == Retry</returns>
        </member>
        <member name="M:Vi.Extensions.DialogResult.Methods.IsYes(System.Windows.Forms.DialogResult)">
            <summary>
            Checks the value of 'DialogResult'
            </summary>
            <param name="dr">True s è uguale a 'DialogResult.Yes'. False altrimenti.</param>
            <returns>True if dr == Yes</returns>
        </member>
        <member name="T:Vi.Extensions.SqlDataReader.Methods">
            <summary>
            Collection of extention methods for the SqlDataReader
            </summary>
        </member>
        <member name="M:Vi.Extensions.SqlDataReader.Methods.GetInt32(System.Data.SqlClient.SqlDataReader,System.String)">
            <summary>
            Converts value in column 'name' to 'Int32?'.
            </summary>
            <param name="dataReader">The 'DataReader' containing the data.</param>
            <param name="name">The name of the column to convert to 'Int32'.</param>
            <returns>dataReader.GetInt32(name) if possible, 'null' otherwise ('System.Exception' included).</returns>
        </member>
        <member name="M:Vi.Extensions.SqlDataReader.Methods.GetInt32(System.Data.SqlClient.SqlDataReader,System.String,System.Int32)">
            <summary>
            Converts value in column 'name' to 'Int32?'. 
            </summary>
            <param name="dataReader">The 'DataReader' containing the data.</param>
            <param name="name">The name of the column to convert to 'Int32'.</param>
            <param name="default">The returning valu is when the cast in not possible.</param>
            <returns>dataReader.GetInt32(name) if possible, 'default' otherwise ('System.Exception' included).</returns>
        </member>
        <member name="M:Vi.Extensions.SqlDataReader.Methods.GetInt32(System.Data.SqlClient.SqlDataReader,System.String,System.Nullable{System.Int32})">
            <summary>
            Converts value in column 'name' to 'Int32?'. 
            </summary>
            <param name="dataReader">The 'DataReader' containing the data.</param>
            <param name="name">The name of the column to convert to 'Int32'.</param>
            <param name="default">The returning valu is when the cast in not possible.</param>
            <returns>dataReader.GetInt32(name) if possible, 'default' otherwise ('System.Exception' included).</returns>
        </member>
        <member name="M:Vi.Extensions.SqlDataReader.Methods.GetString(System.Data.SqlClient.SqlDataReader,System.String)">
            <summary>
            Converts value in column 'name' to 'string?'.
            </summary>
            <param name="dataReader">The 'DataReader' containing the data.</param>
            <param name="name">The name of the column to convert to 'string'.</param>
            <returns>dataReader.GetString(name) if possible, 'null' otherwise ('System.Exception' included).</returns>
        </member>
        <member name="M:Vi.Extensions.SqlDataReader.Methods.GetString(System.Data.SqlClient.SqlDataReader,System.String,System.String)">
            <summary>
            Converts value in column 'name' to 'string?'. 
            </summary>
            <param name="dataReader">The 'DataReader' containing the data.</param>
            <param name="name">The name of the column to convert to 'string'.</param>
            <param name="default">The returning value default when the cast in not possible.</param>
            <returns>dataReader.GetString(name) if possible, 'default' otherwise ('System.Exception' included).</returns>
        </member>
        <member name="M:Vi.Extensions.SqlDataReader.Methods.GetDateTime(System.Data.SqlClient.SqlDataReader,System.String,System.DateTime)">
            <summary>
            Converts value in column 'name' to 'DateTime?'.
            </summary>
            <param name="dataReader">The 'DataReader' containing the data.</param>
            <param name="name">The name of the column to convert to 'string'.</param>
            <param name="default">The returning value when the cast in not possible.</param>
            <returns>dataReader.GetDateTime(name) if possible, 'null' otherwise ('System.Exception' included).</returns>
        </member>
        <member name="T:Vi.Extensions.SqlCommand.Methods">
            <summary>
            Collection of 'extension methods' for 'SqlClient.SqlCommand'
            </summary>
        </member>
        <member name="M:Vi.Extensions.SqlCommand.Methods.ExecuteReader(System.Data.SqlClient.SqlCommand,System.Func{System.Data.SqlClient.SqlDataReader,System.Boolean})">
            <summary>
            Esegue il command ottenendo un 'DataReader'. Se per il 'DataReader', 'HasRows = true' e 'dr.Read = true' cicla sul 'DataReader' ed evoca la 'callBack' ad ogni iterazione.
            </summary>
            <param name="command">Il command da eseguire.</param>
            <param name="row">La callback da eseguire su ogni singola riga dati del 'DataReader'.</param>
        </member>
        <member name="M:Vi.Extensions.SqlCommand.Methods.ExecuteReader(System.Data.SqlClient.SqlCommand,System.Action{System.Data.SqlClient.SqlDataReader},System.Func{System.Data.SqlClient.SqlDataReader,System.Boolean})">
            <summary>
            Esegue il command ottenendo un 'DataReader'. Se per il 'DataReader', 'HasRows = true' e 'dr.Read = true' cicla sul 'DataReader' ed evoca la 'callBack' ad ogni iterazione.
            </summary>
            <param name="command">Il command da eseguire.</param>
            <param name="header">La callback da eseguire per realizzare una intestazione di tabelle dal 'DataReader'.</param>
            <param name="row">La callback da eseguire su ogni singola riga dati del 'DataReader'.</param>
        </member>
        <member name="M:Vi.Extensions.SqlCommand.Methods.ExecuteReaderAsync(System.Data.SqlClient.SqlCommand,System.Action{System.Data.SqlClient.SqlDataReader},System.Func{System.Data.SqlClient.SqlDataReader,System.Boolean})">
            <summary>
            Implementazione asincrona (semplificata) del metodo executeReader
            </summary>
            <param name="command">L'oggetto con le 'istruzioni' per interrogare il DB.</param>
            <param name="header">CallBack da eseguire non appena ricevuto il dataReader. Dovrebbe contenere i comandi per manipolare le colonne.</param>
            <param name="row">CallBack che viene chiamata iterativamente (ad ogni esecuzione di dr.HasRows). Per terminare il loop sul DataReader è sufficiente che il return sia false.</param>
        </member>
        <member name="T:Vi.Extensions.TimeSpan.Methods">
            <summary>
            Collection of extention methods for TimeSpan
            </summary>
        </member>
        <member name="M:Vi.Extensions.TimeSpan.Methods.ToHHMM(System.TimeSpan)">
            <summary>
            Converts a TimeSpan into a string (format HH:MM)
            </summary>
            <param name="value">The timespan to convert.</param>
            <returns>A string in the format of 'HH:MM'.</returns>
        </member>
        <member name="M:Vi.Extensions.TimeSpan.Methods.ToHHMM(System.Nullable{System.TimeSpan})">
            <summary>
            Converts a TimeSpan into a string (format HH:MM)
            </summary>
            <param name="value">Il timespan da convertire.</param>
            <returns>Una stringa nel formato 'HH:MM' se il TimeSpan e not null, empty altrimenti.</returns>
        </member>
        <member name="T:Vi.Extensions.Random.Methods">
            <summary>
            Collection of extention methods for the 'System.Random' Object.
            </summary>
        </member>
        <member name="M:Vi.Extensions.Random.Methods.Next(System.Random,System.Int32,System.Int32,System.Byte)">
            <summary>
            Returns a non-negative random integer between 'min' and 'max'.
            </summary>
            <param name="rnd">The current instance of the 'System.Random' object.</param>
            <param name="min">The min value for the resulting value.</param>
            <param name="max">The max value for the resulting value.</param>
            <param name="iterations">Set the distribution 1: Linear (omogeneous) 2: Triangular; ... Gaussian</param>
            <returns>A  random value between min and max with a specified distribution.</returns>
        </member>
        <member name="M:Vi.Extensions.Random.Methods.Bet(System.Random,System.Byte,Vi.Types.Percentage)">
            <summary>
            Compare a random value between 0 and 100 against the value of 'probability'
            </summary>
            <param name="rnd"></param>
            <param name="grade">The grade of the polinomial distribution.</param>
            <param name="probability">a number between 0 and 100. Grater becom 100 smallest becom 0</param>
            <returns>A true if 'brobability is grater than a random value (rnd.next > probability)(</returns>
        </member>
        <member name="M:Vi.Extensions.Random.Methods.Bet(System.Random,Vi.Types.Percentage)">
            <summary>
            
            </summary>
            <param name="rnd">The current instance of the 'System.Random object.</param>
            <param name="probability">A value between 0 and 100. The expected probability an event is successfull.</param>
            <returns>A random value (rnd.next > probability)</returns>
        </member>
        <member name="T:Vi.Statics.Tiger">
            <summary>
            Tiger provides high performances logging capabilities.
            (About 100K log entries per second on a standard machine, added to the queue and 8K message sent to the file per second)
            </summary>
            <summary>
            Provides a static, asynchronous logging utility for handling normal, error, and emergency logs.
            <para>Normal logs consist of simple text messages, while error logs are used for exceptions and managed errors.</para>
            <para>The emergency log file is used as a fallback when an internal exception, such as a file being locked, prevents writing to the primary log.
            This allows the system to attempt writing to an alternative location.</para>
            <para>Write operations occur on a separate thread to ensure non-blocking log operations.
            Robust error handling guarantees the highest possible probability of a successful write.</para>
            <para>As a final measure, the <see cref="E:Vi.Statics.Tiger.OnDataLost"/> event is raised to allow the application to handle data loss gracefully.</para>
            </summary>
        </member>
        <member name="T:Vi.Statics.Tiger.LogEntry">
            <summary>
            Represents a base class for log entries, encapsulating common log attributes and formatting logic.
            </summary>
            <summary>
            Abstract base class for all log data entries, providing common timestamping, contextual information, and formatting.
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogEntry.Counter">
            <summary>
            Gets or sets the sequential counter for the log entry.
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogEntry.Queued">
            <summary>
            The number of itemd still in the Queue.
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogEntry.Now">
            <summary>
            Gets or sets the creation time for the log entry.
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogEntry.UtcNow">
            <summary>
            Gets or sets the UTC creation timestamp for the log entry.
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogEntry.Level">
            
             <summary>
             Gets or sets the severity level of the log message.
             </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogEntry.Line">
            <summary>
            Gets or sets the line number in the source file where the log method was called.
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogEntry.Member">
            <summary>
            Gets or sets the name of the calling member (method, property, etc.).
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogEntry.File">
            <summary>
            Gets or sets the full path of the source file where the log method was called.
            </summary>
        </member>
        <member name="M:Vi.Statics.Tiger.LogEntry.#ctor(System.Byte,Vi.Logger.Levels,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vi.Statics.Tiger.LogEntry"/> class.
            </summary>
            <param name="indentation">The visual indentation level for the log message.</param>
            <param name="level">The severity level of the log message.</param>
            <param name="counter">The sequential counter for the log entry.</param>
            <param name="queued"> The number of items still in the queue at the time of logging.</param>
            <param name="line">The line number in the source file (auto-populated by CallerLineNumber).</param>
            <param name="member">The name of the calling member (auto-populated by CallerMemberName).</param>
            <param name="file">The full path of the source file (auto-populated by CallerFilePath).</param>
        </member>
        <member name="M:Vi.Statics.Tiger.LogEntry.ToReport(System.UInt32)">
            <summary>
            Returns a string representation of the log data, formatted with default indentation.
            </summary>
            <param name="count">Should be the number of log entries still in the Queue.</param>
            <returns>A formatted string representing the log entry's common data.</returns>
        </member>
        <member name="M:Vi.Statics.Tiger.LogEntry.ToReport(System.Byte,System.UInt32)">
            <summary>
            Returns a string representation of the log data, formatted with a specified indentation level.
            </summary>
            <param name="indentation">The desired indentation level for this specific log entry.</param>
            <param name="count"> The number of log entries still in the queue at the time of logging.</param>
            <returns>A formatted string containing common log data fields, suitable for prefixing a message.</returns>
            <remarks>
            This method formats the common log attributes (level, timestamps, counter, call info)
            into a comma-separated string. Derived classes are expected to append their specific
            message content to this string. Commas are used as separators as the base information
            is guaranteed not to contain them, ensuring safe parsing of the standard fields.
            </remarks>
        </member>
        <member name="T:Vi.Statics.Tiger.LogEntryE">
            <summary>
            Represents a log entry specifically for exceptions, encapsulating exception details and formatting logic.
            </summary>
            <summary>
            Specializes <see cref="T:Vi.Statics.Tiger.LogEntry"/> for logging exception details, including stack traces.
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogEntryE.SE">
            <summary>
            Gets or sets the <see cref="T:System.Exception"/> object associated with this log entry.
            </summary>
        </member>
        <member name="M:Vi.Statics.Tiger.LogEntryE.ToReport(System.UInt32)">
            <summary>
            Serializes an Exception object into a custom key-value string format for high-performance logging.
            </summary>
            <param name="count">This variable is intended to record the number of queued items at the
            moment of writing (there should be anotter record of the number of queued items at the moment the item  is added to the queue. Both are used for statistical pourposes.</param>
            <returns>A string representing the exception's data in the custom format.</returns>
        </member>
        <member name="M:Vi.Statics.Tiger.LogEntryE.ToReport(System.UInt32,System.Exception)">
            <summary>
            Converts an <see cref="T:System.Exception"/> object into a detailed, formatted string report.
            This method is intended for generating comprehensive log entries for exceptions.
            </summary>
            <param name="se">The <see cref="T:System.Exception"/> object to report. This can be <see langword="null"/>,
            in which case the method will generate a report indicating no exception was provided.</param>
            <param name="count">The number of items currently in the queue at the moment this report is generated.
            This value, along with the count at the time the item was added to the queue,
            is used for statistical purposes (e.g., latency analysis).</param>
            <returns>A multi-line string containing a structured report of the exception,
            including its type, message, stack trace, and any associated data.</returns>
        </member>
        <member name="M:Vi.Statics.Tiger.LogEntryE.#ctor(System.Byte,System.Int32,System.Int32,System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:LogDataE"/> class.
            </summary>
            <param name="indentation">The visual indentation level.</param>
            <param name="counter">The sequential counter for the log entry.</param>
            <param name="queued"> The number of items still in the queue at the time of logging.</param>
            <param name="se">The <see cref="T:System.Exception"/> to be logged.</param>
            <param name="line">The line number in the source file.</param>
            <param name="member">The name of the calling member.</param>
            <param name="file">The full path of the source file.</param>
        </member>
        <member name="M:Vi.Statics.Tiger.LogEntryE.ToReport(System.Collections.IDictionary)">
            <summary>
            Formats the content of the Exception.Data property into a readable string.
            </summary>
            <param name="exceptionData">The IDictionary returned by Exception.Data.</param>
            <returns>A formatted string containing all key-value pairs, or a message if no data is present.</returns>
        </member>
        <member name="T:Vi.Statics.Tiger.LogEntryN">
            <summary>
            Represents a normal log entry with a message.
            </summary>
            <summary>
            Specializes <see cref="T:Vi.Statics.Tiger.LogEntry"/> for standard informational or error log entries that carry a simple message.
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogEntryN.Message">
            <summary>
            Gets or sets the primary message content of the log entry.
            </summary>
        </member>
        <member name="M:Vi.Statics.Tiger.LogEntryN.#ctor(System.Byte,Vi.Logger.Levels,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vi.Statics.Tiger.LogEntryE"/> class.
            </summary>
            <param name="indentation">The visual indentation level.</param>
            <param name="level">The severity level of the message.</param>
            <param name="counter">The sequential counter for the log entry.</param>
            <param name="queued"> The number of items still in the queue at the time of logging.</param>
            <param name="message">The text message for the log entry.</param>
            <param name="line">The line number in the source file.</param>
            <param name="member">The name of the calling member.</param>
            <param name="file">The full path of the source file.</param>
        </member>
        <member name="M:Vi.Statics.Tiger.LogEntryN.ToReport(System.UInt32)">
            <summary>
            Returns a formatted string representation of the normal log entry, including the base log data and the specific message.
            </summary>
            <param name="count"> The number of log entries still in the queue at the time of logging.</param>
            <returns>A complete, comma-separated string for the normal log entry.</returns>
        </member>
        <member name="F:Vi.Statics.Tiger.CounterE">
            <summary>
            Counter for exception log entries. Useful for detecting sequence gaps, which might indicate data loss.
            </summary>
        </member>
        <member name="F:Vi.Statics.Tiger.CounterN">
            <summary>
            Counter for normal log entries. Useful for detecting sequence gaps, which might indicate data loss.
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogFileN">
            <summary>
            Gets the full path to the current normal log file (ending with '.N.log').
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogFileE">
            <summary>
            Gets the full path to the current error log file (ending with '.E.log').
            </summary>
        </member>
        <member name="P:Vi.Statics.Tiger.LogFileX">
            <summary>
            Gets the full path to the current emergency log file (ending with '.X.log').
            </summary>
        </member>
        <member name="T:Vi.Statics.Tiger.LogDelegate">
            <summary>
            Represents the logging levels.
            </summary>
            <param name="level">The severity level of the log message.</param>
            <param name="message">The content of the log message.</param>
            <param name="line">Automatically populated with the line number in the source file where this method is called.</param>
            <param name="member">Automatically populated with the name of the calling member (method, property, etc.).</param>
            <param name="file">Automatically populated with the full path of the source file where this method is called.</param>
        </member>
        <member name="E:Vi.Statics.Tiger.OnLog">
            <summary>
            Occurs when a log message is processed, allowing external subscribers to receive log events.
            </summary>
        </member>
        <member name="T:Vi.Statics.Tiger.EmergencyDelegate">
            <summary>
            Represents a delegate for emergency logging events.
            </summary>
            <param name="message">The emergency message to be sent.</param>
        </member>
        <member name="E:Vi.Statics.Tiger.OnEmergency">
            <summary>
            Occurs when an **internal exception** prevents writing to the primary log files,
            causing the system to attempt writing to the emergency log file (<see cref="P:Vi.Statics.Tiger.LogFileX"/>).
            </summary>
        </member>
        <member name="T:Vi.Statics.Tiger.DataLostDelegate">
            <summary>
            Represents a delegate for data loss events.
            </summary>
            <param name="message">The message indicating the data loss.</param>
        </member>
        <member name="E:Vi.Statics.Tiger.OnDataLost">
            <summary>
            The OnDataLost event is triggered as a last resort when all attempts to save a log have failed. (Even the emergency log file <see cref="P:Vi.Statics.Tiger.LogFileX"/>) 
            The purpose is to give the event handler a final chance to record the message using an alternative method.
            </summary>
        </member>
        <member name="T:Vi.Statics.Tiger.LogType">
            <summary>
            Specifies the type of log file.
            </summary>
        </member>
        <member name="F:Vi.Statics.Tiger.LogType.N">
            <summary>
            Normal log file, used for general informational, debug, and warning messages.
            </summary>
        </member>
        <member name="F:Vi.Statics.Tiger.LogType.E">
            <summary>
            Error log file, specifically used for logging exceptions and managed errors.
            </summary>
        </member>
        <member name="F:Vi.Statics.Tiger.LogType.X">
            <summary>
            Emergency log file, created as a fallback when an exception occurs during the writing
            of the normal or error log files. Ensures critical messages are still recorded.
            </summary>
        </member>
        <member name="M:Vi.Statics.Tiger.#cctor">
            <summary>
            Static constructor for <see cref="T:Vi.Statics.Tiger"/>.
            Initializes log file paths and starts the two dedicated background threads for normal and error log writing.
            It also registers an event handler for application exit to ensure graceful shutdown.
            </summary>
            <remarks>
            This constructor is automatically called by the .NET runtime when the <see cref="T:Vi.Statics.Tiger"/> class is first accessed.
            It sets up the logging infrastructure, including file paths and background worker threads,
            to ensure non-blocking log operations.
            </remarks>
        </member>
        <member name="M:Vi.Statics.Tiger.OnProcessExit(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="!:AppDomain.CurrentDomain.ProcessExit"/> event.
            This method is called when the application is shutting down to ensure
            that all buffered log data is flushed to the disk and the writer threads are properly terminated.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Vi.Statics.Tiger._OnLogError(System.String,System.String)">
            <summary>
            Handles internal logging errors that occur during the process of writing logs to the file system.
            Attempts to write the original log data to an emergency log file (<see cref="P:Vi.Statics.Tiger.LogFileX"/>) and
            raises the <see cref="E:Vi.Statics.Tiger.OnEmergency"/> event. If even this fails, it raises <see cref="E:Vi.Statics.Tiger.OnDataLost"/>.
            </summary>
            <param name="text">The raw log text that failed to be written to the primary log file.</param>
            <param name="message">A contextual message describing the log writing failure, sent with the event.</param>
        </member>
        <member name="M:Vi.Statics.Tiger.ProcessLogQueue``1(System.Collections.Concurrent.BlockingCollection{``0},System.Func{System.String})">
            <summary>
            Processes a <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/> of log data entries in a background thread,
            writing them to the appropriate log file in batches. Handles file rotation based on date changes.
            </summary>
            <typeparam name="T">The type of <see cref="T:Vi.Statics.Tiger.LogEntry"/> being processed (e.g., <see cref="T:Vi.Statics.Tiger.LogEntryE"/> or <see cref="!:LogDataE"/>).</typeparam>
            <param name="logQueue">The <see cref="T:System.Collections.Concurrent.BlockingCollection`1"/> from which log entries are consumed.</param>
            <param name="getLogFilePath">A function that returns the current full path of the target log file.</param>
            <remarks>
            This method continuously pulls log entries from the queue, buffers them, and writes them in batches
            to minimise file I/O operations. It also includes logic for daily log file rotation and ensures
            all remaining logs are flushed during shutdown.
            </remarks>
        </member>
        <member name="M:Vi.Statics.Tiger.ProcessLogQueueE">
            <summary>
            The dedicated background thread method for processing and writing error log entries (<see cref="!:LogDataE"/>)
            from the internal error log queue (<see cref="F:Vi.Statics.Tiger.LogQueueE"/>) to the error log file (<see cref="P:Vi.Statics.Tiger.LogFileE"/>).
            </summary>
        </member>
        <member name="M:Vi.Statics.Tiger.ProcessLogQueueN">
            <summary>
            The dedicated background thread method for processing and writing normal log entries (<see cref="T:Vi.Statics.Tiger.LogEntryE"/>)
            from the internal normal log queue (<see cref="F:Vi.Statics.Tiger.LogQueueN"/>) to the normal log file (<see cref="P:Vi.Statics.Tiger.LogFileN"/>).
            </summary>
        </member>
        <member name="M:Vi.Statics.Tiger.SetLogFiles">
            <summary>
            Sets the full paths for the three log files: <see cref="P:Vi.Statics.Tiger.LogFileN"/> (Normal), <see cref="P:Vi.Statics.Tiger.LogFileE"/> (Error), and <see cref="P:Vi.Statics.Tiger.LogFileX"/> (Emergency).
            File names are dynamically generated based on the current UTC date and time to ensure uniqueness and proper daily rotation.
            </summary>
            <remarks>
            This method includes logic to handle transitions near midnight, ensuring that new log files are created for a new day.
            It also checks for existing files to avoid conflicts if the application restarts very quickly on the same day.
            </remarks>
        </member>
        <member name="M:Vi.Statics.Tiger.ClearLogs(System.UInt32)">
            <summary>
            Clears log files older than the specified age in days. 
            multiple calls in the same day.
            </summary>
            <param name="age">The age in days that sets the length of the queue.</param>
        </member>
        <member name="M:Vi.Statics.Tiger.ToYyyyMMdd(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> object to a string in the "yyyy-MM-dd" format.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/> object to convert.</param>
            <returns>A string representing the provided date in "yyyy-MM-dd" format.</returns>
        </member>
        <member name="M:Vi.Statics.Tiger.AppendAllLines(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Appends a collection of log lines to the specified log file.
            Includes robust error handling for common file I/O issues, redirecting to emergency logging if needed.
            </summary>
            <param name="logFilePath">The full path to the log file where lines should be appended.</param>
            <param name="lines">A <see cref="T:System.Collections.Generic.List`1"/> of strings, where each string is a log entry to be written.</param>
        </member>
        <member name="M:Vi.Statics.Tiger.IsSameDay(System.String,System.DateTime)">
            <summary>
            Checks if a given file name (representing a date) is the same as the date of a provided <see cref="T:System.DateTime"/> object.
            This is used for daily log file rotation.
            </summary>
            <param name="fullFileName">The file name string to compare, typically in "yyyy-MM-dd" format (e.g., from <see cref="!:Tiger.FileName"/>).</param>
            <param name="date">The <see cref="T:System.DateTime"/> object whose date component will be compared.</param>
            <returns>
            <see langword="true"/> if the date extracted from <paramref name="fullFileName"/> matches the date of <paramref name="date2"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Vi.Statics.Tiger.Write(System.Byte,Vi.Logger.Levels,System.String,System.Int32,System.String,System.String)">
            <summary>
            Writes a general log message with a specified indentation and severity level.
            This is the primary method for adding standard log entries to the normal log file (<see cref="P:Vi.Statics.Tiger.LogFileN"/>).
            </summary>
            <param name="indentation">The visual indentation level for the log message (e.g., 0 for no indent, 1 for 3 spaces).</param>
            <param name="level">The severity level of the log message (<see cref="!:Levels"/> enum).</param>
            <param name="message">The main text content of the log entry.</param>
            <param name="line">Automatically populated with the line number in the source file where this method is called.</param>
            <param name="member">Automatically populated with the name of the calling member (method, property, etc.).</param>
            <param name="file">Automatically populated with the full path of the source file where this method is called.</param>
        </member>
        <member name="M:Vi.Statics.Tiger.Write(Vi.Logger.Levels,System.String,System.Int32,System.String,System.String)">
            <summary>
            Writes a general log message with a specified indentation and severity level.
            This is the primary method for adding standard log entries to the normal log file (<see cref="P:Vi.Statics.Tiger.LogFileN"/>).
            </summary>
            <param name="level">The severity level of the log message (<see cref="!:Levels"/> enum).</param>
            <param name="message">The main text content of the log entry.</param>
            <param name="line">Automatically populated with the line number in the source file where this method is called.</param>
            <param name="member">Automatically populated with the name of the calling member (method, property, etc.).</param>
            <param name="file">Automatically populated with the full path of the source file where this method is called.</param>
        </member>
        <member name="M:Vi.Statics.Tiger.Write(System.Byte,System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Writes an exception log entry to both the normal log file (<see cref="P:Vi.Statics.Tiger.LogFileN"/>) (as a message)
            and the dedicated error log file (<see cref="P:Vi.Statics.Tiger.LogFileE"/>) with full exception details.
            </summary>
            <param name="indentation">The visual indentation level for the log message.</param>
            <param name="se">The <see cref="T:System.Exception"/> object to be logged. Its message and stack trace will be captured.</param>
            <param name="line">Automatically populated with the line number in the source file where this method is called.</param>
            <param name="member">Automatically populated with the name of the calling member.</param>
            <param name="file">Automatically populated with the full path of the source file.</param>
        </member>
        <member name="M:Vi.Statics.Tiger.Write(System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Writes an exception log entry to both the normal log file (<see cref="P:Vi.Statics.Tiger.LogFileN"/>) (as a message)
            and the dedicated error log file (<see cref="P:Vi.Statics.Tiger.LogFileE"/>) with full exception details.
            </summary>
            <param name="se">The <see cref="T:System.Exception"/> object to be logged. Its message and stack trace will be captured.</param>
            <param name="line">Automatically populated with the line number in the source file where this method is called.</param>
            <param name="member">Automatically populated with the name of the calling member.</param>
            <param name="file">Automatically populated with the full path of the source file.</param>
        </member>
        <member name="T:Vi.Statics.Profile">
            <summary>
            Collection of static methods to manage an 'INI' file.
            </summary>
        </member>
        <member name="T:Vi.Statics.Profile.OnWarningDelegate">
            <summary>
            The 'delegate' for the event 'Warning'.
            </summary>
            <param name="parameter">The name of the parameter with something wrong.</param>
            <param name="message">The info about what went wrong.</param>
            <param name="fileName">The name of the INI file currently used.</param>
        </member>
        <member name="E:Vi.Statics.Profile.OnWarning">
            <summary>
            This event is fired instead of a 'System.Exception' anytime something goes wrong.
            </summary>
        </member>
        <member name="M:Vi.Statics.Profile.Create(System.String)">
            <summary>
            Creates the file INI If doesn't exist.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Vi.Statics.Profile.Sections(System.Int32,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Retrives all the 'Sections' in an INI file.
            </summary>
            <param name="fileName">The name of the initialization file. (If the file was created using Unicode characters, the function writes Unicode characters to the file. Otherwise, the function writes ANSI characters.)</param>
            <param name="bufferSize">The number of bytes fetched by the method 'GetPrivateProfileString'. If the buffer is not enough to contain all the data. 'GetPrivateProfileString' is acalled again.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The names of all the Sections or an empty array (a zero length array.)</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Sections(System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Retrives all the 'Sections' in an INI file.
            </summary>
            <param name="fileName">The name of the initialization file. (If the file was created using Unicode characters, the function writes Unicode characters to the file. Otherwise, the function writes ANSI characters.)</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The names of all the Sections.</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Sections(System.String)">
            <summary>
            Retrives all the 'Sections' in an INI file.
            </summary>
            <param name="fileName">The name of the initialization file. (If the file was created using Unicode characters, the function writes Unicode characters to the file. Otherwise, the function writes ANSI characters.)</param>
            <returns>The names of all the Sections.</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Keys(System.String,System.Int32,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Retrives all the 'Keys' belonging to a 'Sections' in an INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <param name="bufferSize">The number of bytes fetched by the method 'GetPrivateProfileString'. If the buffer is not enough to contain all the data. 'GetPrivateProfileString' is acalled again.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The names of all the Keys under a section.</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Keys(System.String,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Retrives all the 'Keys' belonging to a 'Sections' in an INI file.
            </summary>
            <param name="section"></param>
            <param name="fileName"></param>
            <param name="onWarning"></param>
            <returns>The names of all the Keys.</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String,System.String,System.Int32,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads data from the 'INI' using the method 'GetPrivateProfileString'
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <param name="bufferSize">The number of bytes fetched by the method 'GetPrivateProfileString'. If the buffer is not enough to contain all the data. 'GetPrivateProfileString' is acalled again.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String,System.String,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads a string from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String,System.String,System.String)">
            <summary>
            Reads a string from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String,System.DateTime,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads a DateTime from the INI file. The dateTime is stored as a 'long': (the value of the property 'ticks')
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Reads a DateTime from the INI file. The dateTime is stored as a 'long': (the value of the property 'ticks')
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Reads a byte[] from the INI file. The byte[] is stored as a 'UTF8'
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
            <returns></returns>        
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String)">
            <summary>
            Reads all the keys in a provided section in one shot
            </summary>
            <param name="section">The section to read</param>
            <param name="fileName">The INI fully qualified name.</param>
            <returns>All  the keys in a section organized in a nameValueCollection</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Write``1(System.String,System.String,``0,System.String)">
            <summary>
            This is the 'method' used by all the other version of the method 'Write'
            </summary>
            <typeparam name="T">Can be any type with the method 'ToString'.</typeparam>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="value">The value to write in the INI file.</param>
            <param name="fileName">The full path of the INI file where write data. If null the callback 'onWarning' will be called.</param>
        </member>
        <member name="M:Vi.Statics.Profile.Write``1(System.String,System.String,``0,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Writes a value of type <typeparamref name="T"/> to the specified section and key in the INI file.
            </summary>
            <typeparam name="T">The type of the value to write.</typeparam>
            <param name="section">The name of the section to which the value will be written. Cannot be null, empty, or whitespace.</param>
            <param name="key">The name of the key under the section where the value will be written. Cannot be null, empty, or whitespace.</param>
            <param name="value">The value to write to the INI file.</param>
            <param name="fileName">The full path of the INI file where the value will be written. Must be a valid file path.</param>
            <param name="onWarning">The callback used to handle warnings or exceptions during the write operation.</param>
        </member>
        <member name="M:Vi.Statics.Profile.Write(System.String,System.String,System.DateTime,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Writes 'DateTime.Ticks' in the INI file, (Writes also the date  in the format "yyyy-MM-dd HH:mm:ss.fff" only to have a human readable copy.)
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="value">The value to write in the INI file.</param>
            <param name="fileName">The full path of the INI file where write data. If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Vi.Statics.Profile.Write(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vi.Statics.Profile"/> class.
            </summary>
        </member>
        <member name="M:Vi.Statics.Profile.Write(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Writes a byte[] in the INI file in the format of a UTF8 string.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="bytes">The value to write in the INI file.</param>
            <param name="fileName">The full path of the INI file where write data. If null the callback 'onWarning' will be called.</param>
        </member>
        <member name="M:Vi.Statics.Profile.Write(System.String,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Writes all the keys and values from a NameValueCollection into the specified section of the INI file.
            </summary>
            <param name="section">The name of the section to which the keys and values will be written.</param>
            <param name="nvc">The NameValueCollection containing the keys and values to write.</param>
            <param name="fileName">The full path of the INI file where the data will be written.</param>
        </member>
        <member name="M:Vi.Statics.Profile.DeleteKey(System.String,System.String,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Deletes a 'Key' (and its value) from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Vi.Statics.Profile.DeleteKeys(System.String,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Deletes all the keys in a session, without deleting the session.
            </summary>
            <param name="section">The name of the section to clear from its keys. (The section will not be removed.)</param>
            <param name="fileName">The full path of the INI file.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Vi.Statics.Profile.DeleteSection(System.String,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Deletes an entire section (all its keys and the section itself) from the INI file.
            </summary>
            <param name="section">The name of the section to totally remove from the 'INI file..</param>
            <param name="fileName">The full path of the INI file.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Vi.Statics.Profile.DeleteAll(System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Deletes everything. (Clears the INI file)
            </summary>
            <param name="fileName">The full path of the INI file to clear.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Vi.Statics.Profile.CheckSection(System.String,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Check the correctness of the parameter 'section'
            </summary>
            <param name="section">The name of a section in the INI file. (Can't be: null; empty; spaces.)</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Vi.Statics.Profile.CheckKey(System.String,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Check the correctness of the parameter 'key'
            </summary>
            <param name="key">The name of a key in the INI file. (Can't be: null; empty; spaces.)</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Vi.Statics.Profile.CheckValue(System.String@,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Check the correctness of the parameter 'value' (When it is a string)
            </summary>
            <param name="value">The name of a key in the INI file. (Can't be: null; empty; spaces. Any Chr(0) will be removed)</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Vi.Statics.Profile.CheckValues(System.Int32[],System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Check the correctness of the parameter 'value' (when it is an array of integer.)
            </summary>
            <param name="value">The name of a key in the INI file. (Can't be: null.)</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Vi.Statics.Profile.CheckFileName(System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Check the correctness of the parameter 'filename' (when it is an array of integer.)
            </summary>
            <param name="fileName">The full path of the INI file where write data. Must be a valid full file path and the file must exist.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Vi.Statics.Profile.ToArray(System.String)">
            <summary>
            Converts a 'null character' ('\0') separated string into an array of strings
            </summary>
            <param name="value">A 'null character' ('\0') separated string. (e.g. "Red\0Green\0Blue\0"). All the 'null character' at the end of the string will be truncated.</param>
            <returns>The string 'value' splitted in an array of string. If 'value is 'null', 'empty' or 'spaces' returns an empty array of strings. ('new string[0]')</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String,System.Drawing.Point,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads a 'System.Drawing.Point' from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data. If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Write(System.String,System.String,System.Int32[],System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Writes an array of integer separated by ';' in the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="values">The value to write in the INI file.</param>
            <param name="fileName">The full path of the INI file where write data. If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Vi.Statics.Profile.Write(System.String,System.String,System.Drawing.Point,System.String)">
            <summary>
            Writes a 'System.Drawing.Point' value (can store the form position when the form is closing.)
            </summary>
            <param name="section">The name of t/he section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="location">A 'point' object.</param>
            <param name="fileName">The full path of the INI file where write data.</param>
        </member>
        <member name="M:Vi.Statics.Profile.Write(System.String,System.String,System.Drawing.Size,System.String)">
            <summary>
            Writes a 'System.Drawing.size' value (can store the form size when the form is closing.)
            </summary>
            <param name="section">The name of t/he section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="size">A 'size' object.</param>
            <param name="fileName">The full path of the INI file where write data.</param>
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String,System.Drawing.Size,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads a 'System.Drawing.Point' from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data. If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String,System.Drawing.Point,System.String)">
            <summary>
            Reads a points.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <returns>A System.Drawing.Point from the INI file, if possible. 'default' otherwise.</returns>
        </member>
        <member name="M:Vi.Statics.Profile.Read(System.String,System.String,System.Int32[],System.String)">
            <summary>
            Reads an array of integer from the INI file. (Any exception triggers the static event 'Profile.Worning')
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
            <exception cref="T:System.Exception">If filename is null</exception>
        </member>
        <member name="T:Vi.Logger">
            <summary>
            Exposes  methods  to log and format messages: Debug; Info; Warn; Error; Fatal; Format.    
            </summary>    
            <summary>
      <img src="\Logger\Images\Logger.png" style="margin: 15px 0px 15px 0px;" />
<!-- 
<br /> This latter is the object that truly logs the message. 
The responsibility of This goal is achieved by a rich set of overloads; a detailed intellisense. 
makes this class '<b>polymorphic</b>' (using an old-style expression) or 

This goal is achieved by a rich set of overloads; a detailed intellisense.
-->
      <p style="Padding: 15px 0px 0px 0px;line-height: 150%;">
        This class is a '<b>presentation layer</b>' wrapped arount the object (an instace of the class Vi.Log4Vi.Logger) provided by the method <b>SetLogger</b>. 
        Vi.Logger (this class) exhibits an enhanced set of the classic log methods to improve, as much as possible, the user experience (the developer in this case).        
      </p>

      <p style="Padding: 15px 0px 0px 0px;line-height: 150%;">
        The responsibility to 'write' the log belongs to the object supplied to this class by the method SetLogger and it is obvious that how the log is implemented doesn't matter to this class.<br />

        This 'architecture'. is a way to implement a '<b>dependency injection</b>' and 'abstracts' toward the log process, giving:
        <ul>
          <li>
            the freedom to <b>choose and change</b> in any moment the implementation of the logging process between: file system; event viewer; Console, DB; ... . <br />
          </li>
          <li>
            a 'global', static and <b>easy to use</b> method to log messages.
          </li>
        </ul>
        
        <span style="font-style: italic;font-size: 90%">
          For example, during the development of a class library it is normal, for the developer, write also a very simple GUI (to interact and test the class library).
          The hassle is that (normally) the class library 'writes' to the Console. Instead, working with a GUI is easier to have the message directly on the window form.
          with this class <b>the switch takes just one line of code</b>, and affects not only the GUI but also the class library (Thus, since the class library is hosted within the GUI, it writes to the 'screen'. When the host change, change also the destination for the log.).
        </span>
      </p>


      <p style="Padding: 15px 0px 0px 0px;line-height: 150%;">
        The advantages, this solution brings, are:
        <ol>
          <li>
            <b>Sets a standard for the company</b>: It is common experience that every developer has its own "style" when writes logs. This shouldn't happen (especially in a well structured company.)
          </li>
          <li>
            <b>Removes the dependency on the specific logging tool</b> adopted: the developer doesn't need to know, how the log is performed. The way logs are 'written' can change at any time (file system; event viewer; DB; screen; ...) .
          </li>
          <li>
            <b>Simplicity</b>: Log4Net is a very powerful tool: just 'plug &amp; forget'. Its drawback is the 'configuration' (by my experience make it run is a nightmare.) This class removes this problem. 
          </li>
        </ol>
      </p>

      
    </summary>
        </member>
        <member name="T:Vi.Logger.LogNDelegate">
            <summary>
            The delegate that is used to log messages.
            </summary>
            <param name="indentation"></param>
            <param name="level">Specifies if the message is a DEBUG; INFO,...</param> 
            <param name="text">The text to log.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="caller">The caller from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
        </member>
        <member name="T:Vi.Logger.LogEDelegate">
            <summary>
            The delegate that is used to log exception.
            </summary>
            <param name="se">The instance of the exception.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="caller">The caller from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
        </member>
        <member name="E:Vi.Logger.OnLogN">
            <summary>
            Event triggered when a log message is written.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Vi.Logger.OnLogE" -->
        <member name="T:Vi.Logger.Levels">
            <summary>
            Enumeration of the possible types of log (method)
            </summary>
        </member>
        <member name="F:Vi.Logger.Levels.DEBUG">
            <summary>
            This is the most verbose logging level (maximum volume setting). Debug should be out-of-bounds for a production system and used only for development and testing.
            </summary>
        </member>
        <member name="F:Vi.Logger.Levels.INFO">
            <summary>
            The 'Info' level is typically used to output information that is useful to the running and management of your system (production). 'Info' would also be the level used to log Entry and Exit points in key areas of your application. However, you may choose to add more entry and exit points at Debug level for more granularity during development and testing.
            </summary>
        </member>
        <member name="F:Vi.Logger.Levels.WARN">
            <summary>
            Warning is often used for handled 'exceptions' or other important log events. For example, if your application requires a configuration setting but has a default in case the setting is missing, then the Warning level should be used to log the missing configuration setting.
            </summary>
        </member>
        <member name="F:Vi.Logger.Levels.ERROR">
            <summary>
            Error is used to log all Errors. This is typically logged inside a catch block at the boundary of your application.
            </summary>
        </member>
        <member name="F:Vi.Logger.Levels.EXCEPTION">
            <summary>
            Exception is used to log all exceptions. This is typically logged inside a catch block at the boundary of your application.
            </summary>
        </member>
        <member name="T:Vi.Logger.FakeLog">
            <summary>
            This is an "empty" class: all the methods are without implementation. 
            </summary>
            <summary>
      <img src="\Logger\Images\Vi.FakeLog.png" style="margin: 15px 0px 15px 0px;" />
      <p style="Padding: 15px 0px 0px 0px;">
         As soon the method 'SetLogger' will be called this class will be replaced with the provided Logger (if not null)
         - The aim with this class is to avoid the check: if(this.Log != nul){...} -
      </p>      
    </summary>
        </member>
        <member name="M:Vi.Logger.FakeLog.Debug(System.String,System.Int32,System.String,System.String)">
            <summary>
            This Method is Without implementation
            </summary>
            <param name="text">The text to log.</param>
            <param name="line">The Line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.FakeLog.Info(System.String,System.Int32,System.String,System.String)">
            <summary>
            This Method is Without implementation
            </summary>
            <param name="text">The text to log.</param>
            <param name="line">The Line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.FakeLog.Warn(System.String,System.Int32,System.String,System.String)">
            <summary>
            This Method is Without implementation
            </summary>
            <param name="text">The text to log.</param>
            <param name="line">The Line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.FakeLog.Error(System.Exception,System.Int32,System.String,System.String)">
            <summary>
            This Method is Without implementation
            </summary>
            <param name="se">The exception to log.</param>
            <param name="line">The Line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.FakeLog.Error(Vi.Types.Error,System.Int32,System.String,System.String)">
            <summary>
            This Method is Without implementation
            </summary>
            <param name="ve">The text to log.</param>
            <param name="line">The Line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.FakeLog.Exception(System.Exception,System.Int32,System.String,System.String)">
            <summary>
            This Method is Without implementation
            </summary>
            <param name="se">The text to log.</param>
            <param name="line">The Line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="T:Vi.Logger.FormatDelegate">
            <summary>
            Defined only for the class 'FormatClass'
            </summary>
            <param name="text">The text to log.</param>
            <param name="line">The Line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="T:Vi.Logger.FormatClass">
            <summary>
            This class is a necessary 'trick', because is not possible have optional parameter 
            (file, caller and line) and a param array. this are necessary for the 'Format' method.
            </summary>
            <summary>
      <img src="\Logger\Images\Vi.FormatClass.png" style="margin: 15px 0px 15px 0px;" />
      <p style="Padding: 15px 0px 0px 0px;">
        C# doesn't allows optional parameters and params array in the same Method. This class is created to bypass this constraint.
      </p>      
    </summary>
        </member>
        <member name="F:Vi.Logger.FormatClass.CallBack">
            <summary>
            The callback used to log the message.
            </summary>
        </member>
        <member name="P:Vi.Logger.FormatClass.File">
            <summary>
            The name of the file from where this method is called.
            </summary>
        </member>
        <member name="P:Vi.Logger.FormatClass.Member">
            <summary>
            The name of the caller where this method is called.
            </summary>
        </member>
        <member name="P:Vi.Logger.FormatClass.Line">
            <summary>
            The Line of the file where this method is called.
            </summary>
        </member>
        <member name="M:Vi.Logger.FormatClass.#ctor(Vi.Logger.FormatDelegate,System.Int32,System.String,System.String)">
            <summary>
            CTor. Assign the parameter to the inner fields.
            </summary>
            <param name="callBack">The callback function used to log one of {Debug; Info; Warn; Fatal}</param>
            <param name="file">The name of the file from where this method is called.</param>
            <param name="caller">The name of the caller where this method is called.</param>
            <param name="line">The Line of the file where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.FormatClass.Format(System.String,System.Object[])">
            <summary>
            Logs the message formatting the text exactly as 'String.Format'.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="F:Vi.Logger.SkipDebug">
            <summary>
            If true 'Debug' will not be traced.
            </summary>
        </member>
        <member name="F:Vi.Logger._Implementation">
            <summary>
            The object effectively used to execute the log. By default is a 'Fake' log (an empty class that does not writes anything). To assigne a true Log object use the method 'SetLogger'. 
            It is not public to avoid misuse like: Logger._Implementation.Debug(...).
            </summary>
        </member>
        <member name="M:Vi.Logger.SetImplementation(Vi.ILog)">
            <summary>
            Assign the provided logger to this class (Vi.Logger). By default this class uses a 'fake' logger that does logs nothing.
            After this assignment, every log will be managed by the provided class. This class in made with Log4Net in mind, but any other way to log can used.
            </summary>
            <param name="Implementation">Any kind of logger that inherits from 'Vi.Shared.ILog'.</param>
        </member>
        <member name="M:Vi.Logger.GetImplementation">
            <summary>
            Gives back the 'Logger' currently used. This method is defined to avoid direct access to this 'logger'
            </summary>
            <returns>The Logger object currently used.</returns>
        </member>
        <member name="M:Vi.Logger.Write(Vi.Logger.Levels,System.String,System.Int32,System.String,System.String)">
            <summary>
            Writes one of the log method based on level.
            </summary>
            <param name="text">The text to log.</param>
            <param name="level">Specifies which kind of log {Debug; Warn; ...}</param>
            <param name="line">The Line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.Write(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Writes a log message with the specified text and level.
            </summary>
            <param name="message">The text to log.</param>
            <param name="level">The log level as a string (e.g., DEBUG, INFO, WARN).</param>
            <param name="line">The line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log originates.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.Write(Vi.Logger.Levels,System.Int32,System.String,System.String)">
            <summary>
            Writes one of the log method based on level.
            </summary>
            <param name="level">Specifies which kind of log {Debug; Warn; ...}</param>
            <param name="line">The Line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
            <returns>An instance of 'FormatClass' with the method 'Format' used to compose the message to log like the 'String.Format'</returns>
        </member>
        <member name="M:Vi.Logger.Write(Vi.Types.Error,System.Int32,System.String,System.String)">
            <summary>
            Writes an 'Error' message in the log file.
            </summary>
            <param name="ve">The exception to log.</param>
            <param name="line">The Line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.Write(System.Exception,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="se">The System.Exception instance</param>
            <param name="line">The line from where this method was called.</param>
            <param name="caller">The caller from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
        </member>
        <member name="M:Vi.Logger.Debug(System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            This is the most verbose logging level (maximum volume setting). Debug should be out-of-bounds for a production system and used only for development and testing.
            Logs a 'Debug in the log file if skepDebug (in config file) is false.
            </summary>
            <param name="indentation">Set the messagge as belonging to a parent 'message'</param>
            <param name="message">The message to log.</param>
            <param name="file">The name of the file from where this method is called.</param>
            <param name="caller">The name of the caller where this method is called.</param>
            <param name="line">The Line of the file where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.Debug(System.String,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message">The message to log</param>
            <param name="line">The line from where this method was called.</param>
            <param name="caller">The caller from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
        </member>
        <member name="M:Vi.Logger.Debug(System.Int32,System.String,System.String)">
            <summary>
            Call this method to reach the Format method 'Debug().Format(...)';
            </summary>
            <param name="file">The name of the file from where this method is called.</param>
            <param name="caller">The name of the caller where this method is called.</param>
            <param name="line">The Line of the file where this method is called.</param>
            <returns>An instance of 'FormatClass' with the method 'Format' used to compose the message to log like the 'String.Format'</returns>
        </member>
        <member name="M:Vi.Logger.Info(System.String,System.Int32,System.String,System.String)">
            <summary>
            The 'Info' level is typically used to output information that is useful to the running and management of your system (production). 'Info' would also be the level used to log Entry and Exit points in key areas of your application. However, you may choose to add more entry and exit points at Debug level for more granularity during development and testing.
            </summary>
            <param name="message">The message to log.</param>
            <param name="file">The name of the file from where this method is called.</param>
            <param name="caller">The name of the caller where this method is called.</param>
            <param name="line">The Line of the file where this method is called.</param>
            <summary>
      <p style="Padding: 15px 0px 0px 0px;">
        Use this method to log the messages used to monitor the apllication in production.
      </p>      
    </summary>
        </member>
        <member name="M:Vi.Logger.Info(System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Writes an 'INFO log' message.
            </summary>
            <param name="indentation">makes the messages hierartically structured.</param>
            <param name="text">The text to show</param>
            <param name="line">The Line of the file where this method is called.</param>
            <param name="caller">Used for debug pourposes: the name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.Info(System.Int32,System.String,System.String)">
            <summary>
            Use this overload to 'Format' a message like the method 'System.String.Format'. The sintax is: Info().Format(string format, params object[] args).
            </summary>
            <param name="line">The Line of the file where this method is called.</param>
            <param name="caller">Used for debug pourposes: the name of the caller from which the log comes.</param>
            <param name="file">The name of the file from where this method is called.</param>
            <returns>An instance of 'FormatClass' with the method 'Format' used to compose the text to log like the 'String.Format'</returns>
        </member>
        <member name="M:Vi.Logger.Warn(System.String,System.Int32,System.String,System.String)">
            <summary>
            Warning is often used for handled 'exceptions' or other important log events. For example, if your application requires a configuration setting but has a default in case the setting is missing, then the Warning level should be used to log the missing configuration setting.
            </summary>
            <param name="text">The text to log.</param>
            <param name="file">The name of the file from where this method is called.</param>
            <param name="caller">The name of the caller where this method is called.</param>
            <param name="line">The Line of the file where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.Warn(System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Warning is often used for handled 'exceptions' or other important log events. For example, if your application requires a configuration setting but has a default in case the setting is missing, then the Warning level should be used to log the missing configuration setting.
            </summary>
            <param name="indentation">The text indentation</param>
            <param name="text">The text to log.</param>
            <param name="file">The name of the file from where this method is called.</param>
            <param name="caller">The name of the caller where this method is called.</param>
            <param name="line">The Line of the file where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.Warn(System.Int32,System.String,System.String)">
            <summary>
            Warning is often used for handled 'exceptions' or other important log events. For example, if your application requires a configuration setting but has a default in case the setting is missing, then the Warning level should be used to log the missing configuration setting.
            </summary>
            <param name="file">The name of the file from where this method is called.</param>
            <param name="caller">The name of the caller where this method is called.</param>
            <param name="line">The Line of the file where this method is called.</param>
            <returns>An instance of 'FormatClass' with the method 'Format' used to compose the text to log like the 'String.Format'</returns>
        </member>
        <member name="M:Vi.Logger.Error(Vi.Types.Error)">
            <summary>
            Error is used to log all unhandled exceptions. This is typically logged inside a catch block at the boundary of your application.
            </summary>
            <param name="ve">The current error instance.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="caller">The caller from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
        </member>
        <member name="M:Vi.Logger.Error(System.Int32,Vi.Types.Error,System.Int32,System.String,System.String)">
            <summary>
            Logs an error message with the specified indentation and error details.
            </summary>
            <param name="indentation">The indentation level for the log message.</param>
            <param name="ve">The error object containing details of the error.</param>
            <param name="line">The line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log originates.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.Error(System.String,System.Int32,System.String,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="message">The error message to log.</param>
            <param name="line">The line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log originates.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.Error(System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Logs an error message with the specified indentation.
            </summary>
            <param name="indentation">The indentation level for the log message.</param>
            <param name="message">The error message to log.</param>
            <param name="line">The line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log originates.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="M:Vi.Logger.Exception(System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Error is used to log all unhandled exceptions. This is typically logged inside a catch block at the boundary of your application.
            </summary>
            <param name="se">The exception to log.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="caller">The caller from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
        </member>
        <member name="M:Vi.Logger.Exception(System.Int32,System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Logs an exception with the specified indentation level.
            </summary>
            <param name="indentation">The indentation level for the log message.</param>
            <param name="se">The exception to log.</param>
            <param name="line">The line number in the file where this method is called.</param>
            <param name="caller">The name of the caller from which the log originates.</param>
            <param name="file">The name of the file from where this method is called.</param>
        </member>
        <member name="T:Vi.ILog">
            <summary>
            The base interface that every class must inherit from, to be used with the Vi.Log4Vi.Logger. 
            </summary>
            <summary>
      <img src="\Logger\Images\ILog.png" style="margin: 15px 0px 15px 0px;" />
      <p style="Padding: 15px 0px 0px 0px;">
        This Interface is defined to implement the <b>"dependency injection"</b> in this project, by the method 'Vi.Logger.SetLogger'.<br />
        Every class used to log messages (regardles the implementation), to be used by this Logger, must inherit from the Vi.ILog interface.
      </p>
      
    </summary>
        </member>
        <member name="M:Vi.ILog.Debug(System.String,System.Int32,System.String,System.String)">
            <summary>
            This is the most verbose logging level (maximum volume setting). Debug should be out-of-bounds for a production system and used only for development and testing.
            </summary>
            <param name="text">The text to log.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <summary>
        <para>
          <p style="padding:9px 0px 7px 0px;" />
        </para>

      </summary>
        </member>
        <member name="M:Vi.ILog.Info(System.String,System.Int32,System.String,System.String)">
            <summary>
            The 'Info' level is typically used to output information that is useful to the running and management of your system (production). 
            </summary>
            <param name="text">The text to log.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <summary>
      <para>
        <p style="padding:9px 0px 7px 0px;">
          'Info' would also be the level used to log Entry and Exit points in key areas of your application. However, you may choose to add more entry and exit points at Debug level for more granularity during development and testing.
        </p>
      </para>

    </summary>
        </member>
        <member name="M:Vi.ILog.Warn(System.String,System.Int32,System.String,System.String)">
            <summary>
            Warning is often used for handled 'exceptions' or other important log events.
            </summary>
            <param name="text">The text to log.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <summary>
      <para>
        <p style="padding:9px 0px 7px 0px;">
          For example, if your application requires a configuration setting but has a default in case the setting is missing, then the Warning level should be used to log the missing configuration setting.
        </p>
      </para>
    
    </summary>
        </member>
        <member name="M:Vi.ILog.Exception(System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Exception is used to log all unhandled exceptions. 
            </summary>
            <param name="se">The exception to log.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <summary>
      <para>
        <p style="padding:9px 0px 7px 0px;">
          This is typically logged inside a catch block at the boundary of your application.
        </p>
      </para>
      
  </summary>
        </member>
        <member name="M:Vi.ILog.Error(Vi.Types.Error,System.Int32,System.String,System.String)">
            <summary>
            Error is used to log all handled exceptions. 
            </summary>
            <param name="ve">The instance of the Vi.Types.Error.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <summary>
      <para>
        <p style="padding:9px 0px 7px 0px;">
          This is typically logged inside a catch block at the boundary of your application.
        </p>
      </para>
      
  </summary>
        </member>
        <member name="T:Vi.Types.Profile">
            <summary>
            Provides methods to manipulate a 'INI' file. This class is a wrapper around the static class: 'Vi.Statics.Profile' where methods are truly implemented.
            It provides an object oriented way to interact with the INI file. (for example: if your application needs more than one INI file, have many instances 
            of this class is a good way to cope with this requirement.)
            </summary>
        </member>
        <member name="F:Vi.Types.Profile.FileName">
            <summary>
            The full path of the INI file.
            </summary>
            <value>The full path of the INI file.</value>
        </member>
        <member name="M:Vi.Types.Profile.#ctor(System.String)">
            <summary>
            Creates an object 'Profile'.
            </summary>
            <param name="fileName">The name of the INI file currently used.</param>
        </member>
        <member name="M:Vi.Types.Profile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vi.Types.Profile"/> class, used to access an INI fie.
            </summary>
        </member>
        <member name="M:Vi.Types.Profile.#ctor(System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Creates an object 'Profile' that sends back information on its flows.
            </summary>
            <param name="fileName">The name of the INI file currently used.</param>
            <param name="onWarning">This function is called each time somenthing goes wrong. It ia a way to move outside of this class the management of the 'exceptions'.</param>
        </member>
        <member name="E:Vi.Types.Profile.OnWarning">
            <summary>
            This event is fired, instead of a 'System.Exception' everytime something goes wrong.
            </summary>
        </member>
        <member name="M:Vi.Types.Profile.Sections">
            <summary>
            Retrives all the 'Sections' in an INI file.
            </summary>
            <returns>The names of all the Sections.</returns>
        </member>
        <member name="M:Vi.Types.Profile.Keys(System.String)">
            <summary>
            Retrives all the 'Keys' belonging to a 'Sections' in an INI file.
            </summary>
            <param name="section">The name of the section to read.</param>
            <returns>The names of all the Keys in the provided section.</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.String)">
            <summary>
            Reads a string from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads a string from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.Boolean)">
            <summary>
            Reads a boolean from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.Int32,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads an integer from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="onWarning">The callback to call in case of warning.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.Int32)">
            <summary>
            Reads an integer from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.Int64)">
            <summary>
            Reads a long from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.DateTime)">
            <summary>
            Reads a DateTime from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.Int32[])">
            <summary>
            Reads an array of integer from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.Drawing.Point)">
            <summary>
            Reads a points.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <returns>A System.Drawing.Point from the INI file, if possible. 'default' otherwise.</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.Drawing.Size)">
            <summary>
            Reads s 'Size'
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default"></param>
            <returns>A System.Drawing.Size from the INI file, if possible. 'default' otherwise.</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String,System.String,System.Int32[],System.String,Vi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads an array of integer from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Vi.Types.Profile.Read(System.String)">
            <summary>
            Reads a section from the INI file and returns its key-value pairs as a NameValueCollection.
            </summary>
            <param name="section">The name of the section to read. If null, the callback 'onWarning' will be called.</param>
            <returns>A NameValueCollection containing the key-value pairs in the specified section.</returns>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.Decimal)">
            <summary>
            Writes a 'decimal' in the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="value">The value to write in the INI file.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.String)">
            <summary>
            Writes a 'string' in the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="value">The value to write in the INI file.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.Int32)">
            <summary>
            Writes an 'integer' in the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="value">The value to write in the INI file.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.Int64)">
            <summary>
            Writes a 'long' in the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="value">The value to write in the INI file.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.DateTime)">
            <summary>
            Writes 'DateTime.Ticks' in the INI file, (Wites also the date  in the format "yyyy-MM-dd HH:mm:ss.fff" only to make it human readable. This is ignored.)
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="value">The value to write in the INI file.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.Boolean)">
            <summary>
            Writes a 'boolean' in the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="value">The value to write in the INI file.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.Int32[])">
            <summary>
            Writes an array of integer separated by ';' in the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="values">The array of integer to write in the INI file.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.Boolean[])">
            <summary>
            Writes an array of boolean separated by ';' in the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="values">The array of booleans to write in the INI file.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.String[])">
            <summary>
            Writes an array of strings separated by ';' in the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="values">The array of booleans to write in the INI file.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Writes a 'NameValueCollection' in the INI file. (It is a collection of key/value pairs.) Adds a key for each item in the collection.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="nvc">the collection to store.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.Drawing.Point)">
            <summary>
            Writes a 'System.Drawing.Point' value (can store the form position when the form is closing.)
            </summary>
            <param name="section">The name of t/he section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data. If null the callback 'onWarning' will be called.</param>
            <param name="point">A location object.</param>
        </member>
        <member name="M:Vi.Types.Profile.Write(System.String,System.String,System.Drawing.Size)">
            <summary>
            Writes a 'System.Drawing.Size' value (Can store the form size when the form is closing.)
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data. If null the callback 'onWarning' will be called.</param>
            <param name="size">A size object.</param>
        </member>
        <member name="M:Vi.Types.Profile.DeleteKey(System.String,System.String)">
            <summary>
            Deletes a 'Key' (and its value) from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
        </member>
        <member name="M:Vi.Types.Profile.DeleteKeys(System.String)">
            <summary>
            Deletes all the keys under the provided section.
            </summary>
            <param name="section">The section to clear from all its keys.</param>
        </member>
        <member name="M:Vi.Types.Profile.DeleteSection(System.String)">
            <summary>
            Deletes an entire section (and all its keys) from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
        </member>
        <member name="M:Vi.Types.Profile.DeleteAll">
            <summary>
            Deletes everything. (Clears the INI file)
            </summary>
        </member>
        <member name="M:Vi.Types.Profile.Show">
            <summary>
            Opens the 'INI' file with the default application.
            </summary>
        </member>
        <member name="T:Vi.Types.JSON">
            <summary>
            Represents a JSON text and provides utility methods for working with it.
            </summary>
        </member>
        <member name="F:Vi.Types.JSON.Text">
            <summary>
            Collector of the most common function around a 'JSON' text
            </summary>
        </member>
        <member name="P:Vi.Types.JSON.IsEmpty">
            <summary>
            Determines if 'Text' is empty (returns: ("" + this.Text).Trim().Length == 0;)
            </summary>
        </member>
        <member name="M:Vi.Types.JSON.#ctor(System.String)">
            <summary>
            Main CTor. Trims the parameter and Assigns it the value 'text' to 'this.Text'. (this.Text = text?.Trim() ?? "";)
            </summary>
            <param name="text">The json text.</param>
        </member>
        <member name="M:Vi.Types.JSON.op_Implicit(Vi.Types.JSON)~System.String">
            <summary>
            Casting 'on the fly' to 'string' of the parameter
            </summary>
            <param name="value">The instance to be converted in 'string'.</param>
        </member>
        <member name="M:Vi.Types.JSON.op_Implicit(System.String)~Vi.Types.JSON">
            <summary>
            Casting 'on the fly' to 'JSON' of the parameter
            </summary>
            <param name="text">the fully qualified file nane to be converted in 'Vi.Types.File'</param>
        </member>
        <member name="M:Vi.Types.JSON.ToJSON(System.String)">
            <summary>
            Performs an explicit casting from string to 'Vi.Types.JSON'.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.Types.JSON.ToString">
            <summary>
            Returns the FullFileName (defined just for DEBUGGING pourposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vi.Types.HResult.GetCode(System.Int32)">
            <summary>
            Returns the specific error code from an HResult.
            </summary>
            <param name="hresult">The HResult to analize.</param>
            <returns>The error code number aqssociated with the HResult</returns>
        </member>
        <member name="M:Vi.Types.HResult.GetDescription(System.Int32)">
            <summary>
            Gets a descriptive string for a given HResult value.
            This tries to match the full HResult first, then falls back to combining facility and code.
            </summary>
        </member>
        <member name="T:Vi.Types.Error">
            <summary>
            Light version of the Exception should (must) be used each time the flow must be interrupted
            Very usefull to break nested control
            </summary>
        </member>
        <member name="F:Vi.Types.Error.Line">
            <summary>
            the line number where the Error arosen
            </summary>
        </member>
        <member name="F:Vi.Types.Error.Member">
            <summary>
            The member from where the Error arosen
            </summary>
        </member>
        <member name="F:Vi.Types.Error.File">
            <summary>
            The file where the Error arosen
            </summary>
        </member>
        <member name="F:Vi.Types.Error.CustomMessage">
            <summary>
            Customer should never be promped with the Exception Message. This is the default message to the customer.
            </summary>
        </member>
        <member name="M:Vi.Types.Error.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vi.Types.Error"/> class with a default message.
            </summary>
        </member>
        <member name="M:Vi.Types.Error.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Create a new instance of the Error object with a message for the customer
            </summary>
            <param name="message">This message will be assigned to the base Exception.Message</param>
            <param name="customMessage">The message for the customer.</param>
        </member>
        <member name="M:Vi.Types.Error.#ctor(System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Create a new instance of 'Error' from a previous instance of System.Exception that is passed to the 'InnerException' parameter.
            </summary>
            <param name="se"></param>
            <param name="line"></param>
            <param name="member"></param>
            <param name="file"></param>
        </member>
        <member name="M:Vi.Types.Error.#ctor(System.String,System.Exception,System.Int32,System.String,System.String)">
            <summary>
            Create a new instance of 'Error' from a previous instance of System.Exception that is passed to the 'InnerException' parameter.
            </summary>
            <param name="message">the message to show for this instance</param>
            <param name="se"></param>
            <param name="line"></param>
            <param name="member"></param>
            <param name="file"></param>
        </member>
        <member name="M:Vi.Types.Error.Throw(System.String,System.Int32,System.String,System.String)">
            <summary>
            Trows an Error  adding Line, member and file where the request was made;
            </summary>
            <param name="message"></param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <exception cref="T:Vi.Types.Error"></exception>
        </member>
        <member name="M:Vi.Types.Error.IfTrue(System.Boolean,System.String,System.Int32,System.String,System.String)">
            <summary>
            Throws an error if the condition is true.
            </summary>
            <param name="condition">The contition to check.</param>
            <param name="message"></param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <exception cref="T:Vi.Types.Error">The message to sent to the user.</exception>
        </member>
        <member name="M:Vi.Types.Error.IfEmpty(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Throws an error if and only if the string is the string.Empty.
            </summary>
            <param name="text">The text to check</param>
            <param name="message">The text to send.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <exception cref="T:Vi.Types.Error"></exception>
        </member>
        <member name="M:Vi.Types.Error.IfSpaces(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Throws an error if and only if the string is the made of spaces (blanks).
            </summary>
            <param name="text">The text to check</param>
            <param name="message">The text to send.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <exception cref="T:Vi.Types.Error"></exception>
        </member>
        <member name="M:Vi.Types.Error.IfFalse(System.Boolean,System.String,System.Int32,System.String,System.String)">
            <summary>
            Throws an error if the condition is false.
            </summary>
            <param name="condition">The contition to check.</param>
            <param name="message"></param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
            <exception cref="T:Vi.Types.Error">The message to sent to the user.</exception>
        </member>
        <member name="M:Vi.Types.Error.IfNull(System.Object,System.String,System.Int32,System.String,System.String)">
            <summary>
            Throws an error if the item is null. Uses the method ErrorIfTrue where condition is (item is null).
            </summary>
            <param name="entity">The entity to check</param>
            <param name="message">The message to sent to the user.</param>
            <param name="line">The line from where this method was called.</param>
            <param name="member">The member from where this method was called.</param>
            <param name="file">The file from where this method was called.</param>
        </member>
        <member name="M:Vi.Types.Error.ToString">
            <summary>
            Defined for debug pourposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vi.Types.Error.Log(System.Int32,System.String,System.String)">
            <summary>
            Logs the current error instance using the Vi.Logger.
            </summary>
        </member>
        <member name="T:Vi.Types.Directory">
            <summary>
            Collect some of the most common function on a string representing a Directory
            
            </summary>
        </member>
        <member name="F:Vi.Types.Directory.Path">
            <summary>
            The path in the string format.
            </summary>
        </member>
        <member name="P:Vi.Types.Directory.Exists">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            Uses 'System.IO.Directory.Exists'
            </summary>
        </member>
        <member name="M:Vi.Types.Directory.#ctor(System.String)">
            <summary>
            Main CTor (assigns the path)
            </summary>
            <param name="path">The path in the string format.</param>
        </member>
        <member name="P:Vi.Types.Directory.Name">
            <summary>
            The name of the directory (without the path)
            </summary>
        </member>
        <member name="P:Vi.Types.Directory.IsAccessDenied">
            <summary>
            checks if the access to the directory is denied!
            </summary>
        </member>
        <member name="P:Vi.Types.Directory.IsValid">
            <summary>
            Determines whether the specified path is valid.
            A valid path is defined as one that:
            - Is not null or whitespace,
            - Does not contain invalid path characters,
            - Is rooted (i.e., has a valid drive or network location),
            - Does not exceed the maximum length of 260 characters.
            </summary>
            <returns>
            True if the path is valid; otherwise, false.
            </returns>
        </member>
        <member name="M:Vi.Types.Directory.op_Implicit(Vi.Types.Directory)~System.String">
            <summary>
            Implements a kind of 'implicit' cast to make this type interchangeable between 'string' and 'Vi.Types.Directory'
            </summary>
            <param name="directory">The instance of a 'Directory' to cast as string.</param>
        </member>
        <member name="M:Vi.Types.Directory.op_Implicit(System.String)~Vi.Types.Directory">
            <summary>
            Implements a kind of 'implicit' cast to make this type interchangeable between 'string' and 'Vi.Types.Directory'
            </summary>
            <param name="path">The string to 'cast'  into 'Vi.Types.Directory'.</param>
        </member>
        <member name="M:Vi.Types.Directory.ToDirectory(Vi.Types.Directory)">
            <summary>
            Do Nothing. Returns the parameter.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.Types.Directory.ToDirectory(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.Types.Directory.Create">
            <summary>
            Creates a new directory if not already existing
            </summary>
        </member>
        <member name="M:Vi.Types.Directory.ToString">
            <summary>
            Returns the Path (defined just for DEBUGGIN pourposes).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vi.Types.Directory.SubDirectories">
            <summary>
            Returns the subdirectories of the specified path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>The  array of subDirectories, Empty array otherwise</returns>
        </member>
        <member name="M:Vi.Types.Directory.HasSubDirectories">
            <summary>
            Checks if the directory has subdirectories.
            </summary>
            <param name="path">The path to check.</param>
            <returns>the number of sub directories, 0 otherwise.</returns>
        </member>
        <member name="T:Vi.Types.File">
            <summary>
            Represents a file and provides utility methods for file operations.
            It also create a Type (for a string representing a file) used to 
            enforce method overload 
            </summary>
        </member>
        <member name="F:Vi.Types.File.FullFileName">
            <summary>
            Collector of the most common function around a 'File'
            </summary>
        </member>
        <member name="P:Vi.Types.File.Exists">
            <summary>
            Determines if the file exists (applies 'System.IO.File.Exists')
            </summary>
        </member>
        <member name="P:Vi.Types.File.Extention">
            <summary>
            The LONG version of the extension WITH the dot.
            </summary>
        </member>
        <member name="P:Vi.Types.File.Ext">
            <summary>
            The SHORT version of the extension WITHOUT the dot.
            </summary>
        </member>
        <member name="P:Vi.Types.File.IsValidPath">
            <summary>
            Determines whether the specified file path is valid.
            A valid path is defined as one that:
            - Is not null or whitespace,
            - Does not contain invalid path characters,
            - Is rooted (i.e., has a valid drive or network location),
            - Does not exceed the maximum length of 260 characters.
            </summary>
            <returns>
            True if the file path is valid; otherwise, false.
            </returns>
        </member>
        <member name="P:Vi.Types.File.IsAccessDenied">
            <summary>
            Checks if the file is 'protected' against any kind of reading
            </summary>
        </member>
        <member name="P:Vi.Types.File.IsEmpty">
            <summary>
            Determines if 'FullFileName' is empty (returns: ("" + this.FullFileName).Trim().Length == 0;)
            </summary>
        </member>
        <member name="P:Vi.Types.File.FullName">
            <summary>
            Returns the File Name WITH the extention. Applies 'System.IO.Path.GetFileName'
            </summary>
        </member>
        <member name="P:Vi.Types.File.FileName">
            <summary>
            Returns the file name without the extension. 
            Applies 'System.IO.Path.GetFileNameWithoutExtension'.
            </summary>
        </member>
        <member name="P:Vi.Types.File.Path">
            <summary>
            The File's 'full path'. (Applies 'System.IO.Path.GetDirectoryName')
            </summary>
        </member>
        <member name="M:Vi.Types.File.#ctor(System.String)">
            <summary>
            Main CTor. Trims the parameter and Assigns it the value 'fullFileName' to 'this.FullFIleName'. (this.FullFileName = fullFileName?.Trim() ?? "";)
            </summary>
            <param name="fullFileName"></param>
        </member>
        <member name="M:Vi.Types.File.op_Implicit(Vi.Types.File)~System.String">
            <summary>
            Casting 'on the fly' to 'string' of the parameter
            </summary>
            <param name="file">The instance to be converted in 'string'.</param>
        </member>
        <member name="M:Vi.Types.File.op_Implicit(System.String)~Vi.Types.File">
            <summary>
            Casting 'on the fly' to 'File' of the parameter
            </summary>
            <param name="fullFileName">the fully qualified file nane to be converted in 'Vi.Types.File'</param>
        </member>
        <member name="M:Vi.Types.File.ToFile(System.String)">
            <summary>
            Performs an explicit casting from string to 'Vi.Types.File'.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.Types.File.ToString">
            <summary>
            Returns the FullFileName (defined just for DEBUGGING pourposes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vi.Types.Percentage">
            <summary>
            A number or ratio expressed as a fraction of 1 (internally represented using the built-in 'System.decimal'. 
            
            It is often denoted using the percent sign, "%", although the abbreviations "pct.", "pct" and sometimes "pc" are also used. 
            A percentage is a dimensionless number; it has no unit of measurement. [Wikipedia]
            </summary>
        </member>
        <member name="F:Vi.Types.Percentage.Value">
            <summary>
            Decimal representation of the value: a number less-equal 1.
            </summary>
        </member>
        <member name="M:Vi.Types.Percentage.#ctor(System.Decimal)">
            <summary>
            Main Constructor.
            </summary>
            <param name="value">Il tipo della sede in formato stringa.</param>
        </member>
        <member name="M:Vi.Types.Percentage.ToText">
            <summary>
            Returns the Value in the format "#0.00%"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vi.Types.Percentage.TryParse(System.String,Vi.Types.Percentage@)">
            <summary>
            Converts the string representation of a number to its Decimal equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="result">When this method returns, contains the Percentage number that is equivalent 
            to the numeric value contained in the parameter 'value', if the conversion succeeded, or zero if the conversion failed. 
            The conversion fails if the 'value' parameter is null or Empty, is not a number in a format compliant 
            with style, or represents a number less than MinValue or greater than MaxValue. This parameter is 
            passed uininitialized; any value originally supplied in result is overwritten.</param>
            <returns>true if 'value' was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Vi.Types.Percentage.op_Implicit(Vi.Types.Percentage)~System.Decimal">
            <summary>
            'Casts' the struct to its original type.
            </summary>
            <param name="percent">An instance of 'Percentage'.</param>
            <returns>The 'decimal' associated with this 'struct'. (percent.value</returns>
        </member>
        <member name="M:Vi.Types.Percentage.op_Implicit(System.Decimal)~Vi.Types.Percentage">
            <summary>
            'Casts' the decimal to Percentage.
            </summary>
            <param name="value">The built in typy to cast to Percentage.</param>
            <returns>New instance of a 'percent' struct.</returns>
        </member>
        <member name="T:Vi.Types.Utilities">
            <summary>
            Provides utility methods for common operations.
            </summary>
        </member>
        <member name="M:Vi.Types.Utilities.ComputeChecksum(System.String)">
            <summary>
            Computes the SHA-256 checksum of the provided string.
            </summary>
            <param name="data">The input string to compute the checksum for.</param>
            <returns>A hexadecimal string representing the computed checksum.</returns>
        </member>
        <member name="T:Vi.Console">
            <summary>
            Implements some utility methods for the console.
            </summary>
        </member>
        <member name="M:Vi.Console.WriteLine(System.String,System.String)">
            <summary>
            Very simple 'extention' of the method 'WriteLine'. that sets 
            different colors for the text based on the level.
            </summary>
            <param name="level">The specification of the message level.</param>
            <param name="message">The text of the message.</param>
        </member>
        <member name="T:Vi.Delegates.TraceDelegate">
            <summary>
            Da utilizzare nei log destinati ai tecnici.
            </summary>
            <param name="messaggio">il messaggio da registrare.</param>
            <param name="line">La linea del codice dove il metodo Trace è stato chiamato.</param>
            <param name="member">Il ni dove il metodo Trace è stato chiamato.</param>
            <param name="file"></param>
        </member>
        <member name="T:Vi.Delegates.ConfirmDelegate">
            <summary>
            Delegate to handle confirmation requests from the user.
            </summary>
            <param name="messaggio">The message to display in the confirmation request.</param>
            <returns>True if the user confirms, otherwise false.</returns>
        </member>
        <member name="T:Vi.Delegates.InfoDelegate">
            <summary>
            Delegate to communicate application state information to the user.
            </summary>
            <param name="messaggio">The message to be communicated.</param>
        </member>
        <member name="T:Vi.Tools.Properties.Ico">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Ico.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Ico.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Ico.Logo_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="T:Vi.Tools.Properties.Images3D">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Images3D.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Images3D.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Images3D.Piu_12x12">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Images3D.Piu_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Images3D.Piu_20x20">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Images3D.Piu_25x25">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Images3D.Piu_32x32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Vi.Tools.Properties.ImagesDFlat">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.Configurazione_Verde_25x25">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.elimina_Rosso_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.elimina_Rosso_30x30">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.elimina_Verde_30x30">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.Home_Verde_30x30">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.Modifica_Verde_25x25">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.Operatore_Verde_25x25">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.Piu_Rosso_20x20">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.Piu_Verde_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.Piu_Verde_25x25">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.Progettazione_Verde_25x25">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.Responsabile_Verde_25x25">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.save_Verde_30x30">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesDFlat.SMS_Verde_25x25">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Vi.Tools.Properties.ImagesRFlat">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Bin_Gray_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Bin_Rosso_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Down_Green_27x27">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Left_Green_27x27">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Pencil_Gray_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Piu_Gray_20x20">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Piu_Verde_14x14">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Piu_Verde_18x18">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Piu_Verde_20x20">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.QuestionMark_Orange_32x32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Right_Green_27x27">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.ImagesRFlat.Up_Green_27x27">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Vi.Tools.Properties.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Resource.Dotted">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Resource.Underline">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Vi.Tools.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Resources.Dotted">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Vi.Tools.Properties.Resources.Underline">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Vi.Tools.Watcher">
            <summary>
            Observes a Directory and it's subDirectories, waiting for changes.
            If a change occours writes a copy of the changed file (before the change) in a backup diretory.
            </summary>
        </member>
        <member name="T:Vi.Tools.Watcher.CopyDelegate">
            <summary>
            It's 'boilerplate code': the delegate for the event 'Copy'
            </summary>
            <param name="changeType">Changes that might occur to a file or directory.</param>
            <param name="subPath">The sub path where the file is stored (relative to the root path from where this watching is 'observing')</param>
            <param name="fileName">The name of the file copied.</param>
        </member>
        <member name="F:Vi.Tools.Watcher.Copy">
            <summary>
            Notifies the ouside world that a backup copy was created.
            </summary>
        </member>
        <member name="T:Vi.Tools.Watcher.ExceptionDelegate">
            <summary>
            It's 'boilerplate code': the delegate for the event 'Exception'
            </summary>
            <param name="se"></param>
        </member>
        <member name="F:Vi.Tools.Watcher.Exception">
            <summary>
             Notifies the ouside world that an exception occurren in this class.
            </summary>
        </member>
        <member name="M:Vi.Tools.Watcher.OnException(System.Exception)">
            <summary>
            It's 'boilerplate code', but this method should be called instead of 'this.Exception'.
            </summary>
        </member>
        <member name="F:Vi.Tools.Watcher.FSW">
            <summary>
            The 'pointer' to the watcher!
            </summary>
        </member>
        <member name="P:Vi.Tools.Watcher.Path">
            <summary>
            The directory to monitor, in standard or Universal Naming Convention (UNC) notation.
            </summary>
        </member>
        <member name="P:Vi.Tools.Watcher.Filter">
            <summary>
            The type of files to watch. For example, "*.txt" watches for changes to all 'txt' files.
            </summary>
        </member>
        <member name="P:Vi.Tools.Watcher.Backup">
            <summary>
            The full path of the backup directory, in standard or Universal Naming Convention (UNC) notation.
            </summary>
        </member>
        <member name="M:Vi.Tools.Watcher.#ctor(System.String,System.String,System.IO.NotifyFilters,System.String)">
            <summary>
            Initialize a FileSystemWatcher.
            </summary>
            <param name="backup">The full path of the backup directory, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="notifyFilters">Specifies changes to watch for in a file or folder.</param>
            <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all 'txt' files.</param>
        </member>
        <member name="M:Vi.Tools.Watcher.Store(System.IO.FileSystemEventArgs)">
            <summary>
            Creates a copy of the modified file in the backup directory. 
            The backup directory is a 'mirror' of the original directory. 
            Each day there is a new backup diretory under the root folder.
            </summary>
            <param name="e">the parameter provided by all the managed events:{Changed, Created, Deleted, Renamed}</param>
        </member>
        <member name="T:Vi.Utilities">
            <summary>
            Provides utility methods for various operations such as hashing, string manipulation, and database interactions.
            </summary>
        </member>
        <member name="F:Vi.Utilities.BlueDakar">
            <summary>
            The Standard DAKAR blue
            </summary>
        </member>
        <member name="M:Vi.Utilities.GetHASH(Vi.Types.File)">
            <summary>
            Gets the HASH SHA256 associated with a file
            </summary>
            <param name="fullFileName">The fully qualified file name.</param>
            <returns>An HASH code</returns>
        </member>
        <member name="M:Vi.Utilities.GetSettingsINI(System.String)">
            <summary>
            Gets the IO.Path.Combine(Vi.Utility.AppRoot, "settings.ini")
            </summary>
        </member>
        <member name="P:Vi.Utilities.ImagesPath">
            <summary>
            The standar path for the images (The folder 'Images. under 'AppDomain.CurrentDomain.BaseDirectory'
            </summary>
        </member>
        <member name="M:Vi.Utilities.Join(System.Object[])">
            <summary>
            Una variante del Metodo 'String.Join' Converte il parametro 'value' in una stringa di valori separati da ';'  
            /// </summary>
            <param name="values">Lista di oggetti da mettere in sequenza. Di ognuno viene convertito in stringa e vengono rimosse le enetuali occorrenze di ';'. Si esegue  'value[x].ToString().Replace(";", " ").</param>
            <returns>Una sequenza di stringhe separate da ' ; ' (compresi gli spazi). 'null' viene convertito in 'Empty'.</returns>
        </member>
        <member name="M:Vi.Utilities.ExecuteReader(System.String,System.String,System.Func{System.Data.Common.DbDataReader,System.Boolean},System.Action{System.Data.Common.DbDataReader},System.Action{System.Exception})">
            <summary>
            Executes a SQL query and processes the result using the provided callbacks. 
            This decouples the connection with the data manipulation.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="sql">The SQL query to execute.</param>
            <param name="row">A callback function to process each row of the result set. Returns true to continue reading, false to stop.</param>
            <param name="header">A callback action to process the header of the result set.</param>
            <param name="onException">A callback action to handle exceptions that occur during execution.</param>
        </member>
        <member name="M:Vi.Utilities.ExecuteReaderAsync(System.String,System.String,System.Func{System.Data.Common.DbDataReader,System.Boolean},System.Action{System.Data.Common.DbDataReader},System.Action{System.Exception})">
            <summary>
            Executes a SQL query asynchronously and processes the result using the provided callbacks. 
            This decouples the connection with the data manipulation.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="sql">The SQL query to execute.</param>
            <param name="row">A callback function to process each row of the result set. Returns true to continue reading, false to stop.</param>
            <param name="header">A callback action to process the header of the result set.</param>
            <param name="onException">A callback action to handle exceptions that occur during execution.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Vi.Utilities.FillAsync(System.String,System.String,System.Action{System.Data.DataTable},System.Action{System.Exception})">
            <summary>
            Executes a SQL query asynchronously and fills a DataTable with the result.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="sql">The SQL query to execute.</param>
            <param name="onSuccess">A callback action to process the filled DataTable.</param>
            <param name="onException">A callback action to handle exceptions that occur during execution.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Vi.Utilities.CheckParameter(System.String,System.Action{System.String})">
            <summary>
            Check the correctness of the parameter 'section'
            </summary>
            <param name="value">The string to check. (Can't be: null; empty; spaces.)</param>
            <param name="onFeedBack">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Vi.Utilities.GetImage(System.Drawing.Image,System.Single)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <param name="opacity"></param>
            <returns></returns>
        </member>
        <member name="M:Vi.Utilities.GetImageGray(System.Drawing.Image,System.Single)">
            <summary>
            Converts the provided image in gray scale
            </summary>
            <param name="originalImage">the image to convert</param>
            <param name="opacity">The desidered opacity</param>
            <returns>Returns the provided imaged grayed and opaque</returns>
        </member>
        <member name="M:Vi.Utilities.OverlayImages(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Overlaps 2 images
            </summary>
            <param name="background">The background image</param>
            <param name="imageOnTop">The image on top</param>
            <returns>The overlay of the 2 images.</returns>
        </member>
        <member name="M:Vi.Utilities.GetAssociatedIcon(System.String)">
            <summary>
            Retrieves the associated icon for a given file extension from the Windows registry.
            </summary>
            <param name="fileExtension">The file extension</param>
            <returns>The ico associated with the extension if any, null otherwise.</returns>
        </member>
        <member name="M:Vi.Utilities.GetRedDot">
            <summary>
            Generates a transparent bitmap containing a red dot in the bottom right corner.
            </summary>
            <returns>A bitmap 48x48 with a red dot image 8 pixel radius, 12 pixel from bottom 12 pixel from right with 50% opacity.</returns>
        </member>
        <member name="T:Xi.Statics.Profile">
            <summary>
            Collection of static methods to manage an 'INI' file.
            </summary>
        </member>
        <member name="T:Xi.Statics.Profile.OnWarningDelegate">
            <summary>
            The 'delegate' for the event 'Warning'.
            </summary>
            <param name="parameter">The name of the parameter with something wrong.</param>
            <param name="message">The info about what went wrong.</param>
        </member>
        <member name="E:Xi.Statics.Profile.OnWarning">
            <summary>
            This event is fired instead of a 'System.Exception' anytime something goes wrong.
            </summary>
        </member>
        <member name="M:Xi.Statics.Profile.Create(System.String)">
            <summary>
            Creates the file INI If doesn't exist.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Xi.Statics.Profile.Sections(System.Int32,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Retrives all the 'Sections' in an INI file.
            </summary>
            <param name="fileName">The name of the initialization file. (If the file was created using Unicode characters, the function writes Unicode characters to the file. Otherwise, the function writes ANSI characters.)</param>
            <param name="bufferSize">The number of bytes fetched by the method 'GetPrivateProfileString'. If the buffer is not enough to contain all the data. 'GetPrivateProfileString' is acalled again.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The names of all the Sections or an empty array (a zero length array.)</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Sections(System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Retrives all the 'Sections' in an INI file.
            </summary>
            <param name="fileName">The name of the initialization file. (If the file was created using Unicode characters, the function writes Unicode characters to the file. Otherwise, the function writes ANSI characters.)</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The names of all the Sections.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Sections(System.String)">
            <summary>
            Retrives all the 'Sections' in an INI file.
            </summary>
            <param name="fileName">The name of the initialization file. (If the file was created using Unicode characters, the function writes Unicode characters to the file. Otherwise, the function writes ANSI characters.)</param>
            <returns>The names of all the Sections.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Keys(System.String,System.Int32,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Retrives all the 'Keys' belonging to a 'Sections' in an INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <param name="bufferSize">The number of bytes fetched by the method 'GetPrivateProfileString'. If the buffer is not enough to contain all the data. 'GetPrivateProfileString' is acalled again.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The names of all the Keys under a section.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Keys(System.String,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Retrives all the 'Keys' belonging to a 'Sections' in an INI file.
            </summary>
            <param name="section"></param>
            <param name="fileName"></param>
            <param name="onWarning"></param>
            <returns>The names of all the Keys.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String,System.String,System.Int32,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads data from the 'INI' using the method 'GetPrivateProfileString'
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <param name="bufferSize">The number of bytes fetched by the method 'GetPrivateProfileString'. If the buffer is not enough to contain all the data. 'GetPrivateProfileString' is acalled again.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Contains(System.String,System.String,System.String,System.Action)">
            <summary>
            Checks if a key exists in a given section in the INI file.
            </summary>
            <param name="key">The key to look at</param>
            <param name="section">The containing section</param>
            <param name="fileName">The fully qualified file INI name</param>
            <param name="onFeedBack">The callback to call to senda a report</param>
            <returns>true if the key exists in the given section, False otherwise.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Contains(System.String,System.String,System.Action)">
            <summary>
            Checks if a section exists in a the INI file.
            </summary>
            <param name="section">The section to search</param>
            <param name="fileName">The fully qualified file INI name</param>
            <param name="onFeedBack">The callback to call to senda a report</param>
            <returns>true if the section exists, False otherwise.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String,System.String,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads a string from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String,System.String,System.String)">
            <summary>
            Reads a string from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String,System.DateTime,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads a DateTime from the INI file. The dateTime is stored as a 'long': (the value of the property 'ticks')
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Reads a DateTime from the INI file. The dateTime is stored as a 'long': (the value of the property 'ticks')
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Reads a byte[] from the INI file. The byte[] is stored as a 'UTF8'
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data.  If null the callback 'onWarning' will be called.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
            <returns></returns>        
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String)">
            <summary>
            Reads all the keys in a proXided section in one shot
            </summary>
            <param name="section">The section to read</param>
            <param name="fileName">The INI fully qualified name.</param>
            <returns>All  the keys in a section organized in a nameValueCollection</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Write``1(System.String,System.String,``0,System.String)">
            <summary>
            This is the 'method' used by all the other version of the method 'Write'
            </summary>
            <typeparam name="T">Can be any type with the method 'ToString'.</typeparam>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="value">The value to write in the INI file.</param>
            <param name="fileName">The full path of the INI file where write data. If null the callback 'onWarning' will be called.</param>
        </member>
        <member name="M:Xi.Statics.Profile.Write``1(System.String,System.String,``0,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Writes a value of type <typeparamref name="T"/> to the specified section and key in the INI file.
            </summary>
            <typeparam name="T">The type of the value to write.</typeparam>
            <param name="section">The name of the section to which the value will be written. Cannot be null, empty, or whitespace.</param>
            <param name="key">The name of the key under the section where the value will be written. Cannot be null, empty, or whitespace.</param>
            <param name="value">The value to write to the INI file.</param>
            <param name="fileName">The full path of the INI file where the value will be written. Must be a valid file path.</param>
            <param name="onWarning">The callback used to handle warnings or exceptions during the write operation.</param>
        </member>
        <member name="M:Xi.Statics.Profile.Write(System.String,System.String,System.DateTime,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Writes 'DateTime.Ticks' in the INI file, (Writes also the date  in the format "yyyy-MM-dd HH:mm:ss.fff" only to have a human readable copy.)
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="value">The value to write in the INI file.</param>
            <param name="fileName">The full path of the INI file where write data. If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Xi.Statics.Profile.Write(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xi.Statics.Profile"/> class.
            </summary>
        </member>
        <member name="M:Xi.Statics.Profile.Write(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Writes a byte[] in the INI file in the format of a UTF8 string.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="bytes">The value to write in the INI file.</param>
            <param name="fileName">The full path of the INI file where write data. If null the callback 'onWarning' will be called.</param>
        </member>
        <member name="M:Xi.Statics.Profile.Write(System.String,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Writes all the keys and values from a NameValueCollection into the specified section of the INI file.
            </summary>
            <param name="section">The name of the section to which the keys and values will be written.</param>
            <param name="nvc">The NameValueCollection containing the keys and values to write.</param>
            <param name="fileName">The full path of the INI file where the data will be written.</param>
        </member>
        <member name="M:Xi.Statics.Profile.DeleteKey(System.String,System.String,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Deletes a 'Key' (and its value) from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Xi.Statics.Profile.DeleteKeys(System.String,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Deletes all the keys in a session, without deleting the session.
            </summary>
            <param name="section">The name of the section to clear from its keys. (The section will not be removed.)</param>
            <param name="fileName">The full path of the INI file.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Xi.Statics.Profile.DeleteSection(System.String,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Deletes an entire section (all its keys and the section itself) from the INI file.
            </summary>
            <param name="section">The name of the section to totally remove from the 'INI file..</param>
            <param name="fileName">The full path of the INI file.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Xi.Statics.Profile.DeleteAll(System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Deletes everything. (Clears the INI file)
            </summary>
            <param name="fileName">The full path of the INI file to clear.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Xi.Statics.Profile.CheckSection(System.String,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Check the correctness of the parameter 'section'
            </summary>
            <param name="section">The name of a section in the INI file. (Can't be: null; empty; spaces.)</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.CheckKey(System.String,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Check the correctness of the parameter 'key'
            </summary>
            <param name="key">The name of a key in the INI file. (Can't be: null; empty; spaces.)</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.CheckValue(System.String@,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Check the correctness of the parameter 'value' (When it is a string)
            </summary>
            <param name="value">The name of a key in the INI file. (Can't be: null; empty; spaces. Any Chr(0) will be removed)</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.CheckValues(System.Int32[],System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Check the correctness of the parameter 'value' (when it is an array of integer.)
            </summary>
            <param name="value">The name of a key in the INI file. (Can't be: null.)</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.CheckFileName(System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Check the correctness of the parameter 'filename' (when it is an array of integer.)
            </summary>
            <param name="fileName">The full path of the INI file where write data. Must be a valid full file path and the file must exist.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>True if 'section' passes the checks. False otherwise and the callback 'onWarning' is called also.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.ToArray(System.String)">
            <summary>
            Converts a 'null character' ('\0') separated string into an array of strings
            </summary>
            <param name="value">A 'null character' ('\0') separated string. (e.g. "Red\0Green\0Blue\0"). All the 'null character' at the end of the string will be truncated.</param>
            <returns>The string 'value' splitted in an array of string. If 'value is 'null', 'empty' or 'spaces' returns an empty array of strings. ('new string[0]')</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Write(System.String,System.String,System.Int32[],System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Writes an array of integer separated by ';' in the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="values">The value to write in the INI file.</param>
            <param name="fileName">The full path of the INI file where write data. If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
        </member>
        <member name="M:Xi.Statics.Profile.Write(System.String,System.String,System.Drawing.Point,System.String)">
            <summary>
            Writes a 'System.Drawing.Point' value (can store the form position when the form is closing.)
            </summary>
            <param name="section">The name of t/he section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="location">A 'point' object.</param>
            <param name="fileName">The full path of the INI file where write data.</param>
        </member>
        <member name="M:Xi.Statics.Profile.Write(System.String,System.String,System.Drawing.Size,System.String)">
            <summary>
            Writes a 'System.Drawing.size' value (can store the form size when the form is closing.)
            </summary>
            <param name="section">The name of t/he section to which the string will be writed. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') where write data.  If null the callback 'onWarning' will be called.</param>
            <param name="size">A 'size' object.</param>
            <param name="fileName">The full path of the INI file where write data.</param>
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String,System.Drawing.Point,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads a 'System.Drawing.Point' from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data. If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String,System.Drawing.Size,System.String,Xi.Statics.Profile.OnWarningDelegate)">
            <summary>
            Reads a 'System.Drawing.Point' from the INI file.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file from which read data. If null the callback 'onWarning' will be called.</param>
            <param name="onWarning">The callback used to manage exceptions.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String,System.Drawing.Point,System.String)">
            <summary>
            Reads a points.
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <returns>A System.Drawing.Point from the INI file, if possible. 'default' otherwise.</returns>
        </member>
        <member name="M:Xi.Statics.Profile.Read(System.String,System.String,System.Int32[],System.String)">
            <summary>
            Reads an array of integer from the INI file. (Any exception triggers the static event 'Profile.Worning')
            </summary>
            <param name="section">The name of the section to which the string will be read. If null the callback 'onWarning' will be called.</param>
            <param name="key">The name of the 'key' (in a 'section') from where read data.  If null the callback 'onWarning' will be called.</param>
            <param name="default">The return value in case something  goes wrong.</param>
            <param name="fileName">The full path of the INI file where write data.</param>
            <returns>The data read from the INI file. '@default' if something  whent wrong. (This method should't raise any exception).</returns>
            <exception cref="T:System.Exception">If filename is null</exception>
        </member>
    </members>
</doc>
